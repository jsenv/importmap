{
  "version": 3,
  "file": "jsenv_importmap.js",
  "sources": [
    "../../node_modules/@jsenv/logger/src/createDetailedMessage.js",
    "../../node_modules/@jsenv/core/helpers/babel/typeof/typeof.js",
    "../../src/internal/assertImportMap.js",
    "../../src/internal/hasScheme.js",
    "../../src/internal/urlToScheme.js",
    "../../src/internal/urlToPathname.js",
    "../../src/internal/urlToOrigin.js",
    "../../src/internal/pathnameToParentPathname.js",
    "../../src/resolveUrl.js",
    "../../src/internal/tryUrlResolution.js",
    "../../src/resolveSpecifier.js",
    "../../src/applyImportMap.js",
    "../../node_modules/@jsenv/core/helpers/babel/defineProperty/defineProperty.js",
    "../../node_modules/@jsenv/core/helpers/babel/objectSpread2/objectSpread2.js",
    "../../src/composeTwoImportMaps.js",
    "../../src/internal/getCommonPathname.js",
    "../../src/internal/urlToRelativeUrl.js",
    "../../src/moveImportMap.js",
    "../../src/sortImportMap.js",
    "../../src/normalizeImportMap.js",
    "../../src/internal/pathnameToExtension.js",
    "../../src/resolveImport.js"
  ],
  "sourcesContent": [
    "export const createDetailedMessage = (message, details = {}) => {\n  let string = `${message}`\n\n  Object.keys(details).forEach((key) => {\n    const value = details[key]\n    string += `\n--- ${key} ---\n${\n  Array.isArray(value)\n    ? value.join(`\n`)\n    : value\n}`\n  })\n\n  return string\n}\n",
    "const nativeTypeOf = (obj) => typeof obj\n\nconst customTypeOf = (obj) => {\n  return obj &&\n    typeof Symbol === \"function\" &&\n    obj.constructor === Symbol &&\n    obj !== Symbol.prototype\n    ? \"symbol\"\n    : typeof obj\n}\n\nexport default typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\"\n  ? nativeTypeOf\n  : customTypeOf\n",
    "export const assertImportMap = (value) => {\n  if (value === null) {\n    throw new TypeError(`an importMap must be an object, got null`)\n  }\n\n  const type = typeof value\n  if (type !== \"object\") {\n    throw new TypeError(`an importMap must be an object, received ${value}`)\n  }\n\n  if (Array.isArray(value)) {\n    throw new TypeError(`an importMap must be an object, received array ${value}`)\n  }\n}\n",
    "export const hasScheme = (string) => {\n  return /^[a-zA-Z]{2,}:/.test(string)\n}\n",
    "export const urlToScheme = (urlString) => {\n  const colonIndex = urlString.indexOf(\":\")\n  if (colonIndex === -1) return \"\"\n  return urlString.slice(0, colonIndex)\n}\n",
    "import { urlToScheme } from \"./urlToScheme.js\"\n\nexport const urlToPathname = (urlString) => {\n  return ressourceToPathname(urlToRessource(urlString))\n}\n\nconst urlToRessource = (urlString) => {\n  const scheme = urlToScheme(urlString)\n\n  if (scheme === \"file\") {\n    return urlString.slice(\"file://\".length)\n  }\n\n  if (scheme === \"https\" || scheme === \"http\") {\n    // remove origin\n    const afterProtocol = urlString.slice(scheme.length + \"://\".length)\n    const pathnameSlashIndex = afterProtocol.indexOf(\"/\", \"://\".length)\n    return afterProtocol.slice(pathnameSlashIndex)\n  }\n\n  return urlString.slice(scheme.length + 1)\n}\n\nconst ressourceToPathname = (ressource) => {\n  const searchSeparatorIndex = ressource.indexOf(\"?\")\n  return searchSeparatorIndex === -1 ? ressource : ressource.slice(0, searchSeparatorIndex)\n}\n",
    "import { urlToScheme } from \"./urlToScheme.js\"\n\nexport const urlToOrigin = (urlString) => {\n  const scheme = urlToScheme(urlString)\n\n  if (scheme === \"file\") {\n    return \"file://\"\n  }\n\n  if (scheme === \"http\" || scheme === \"https\") {\n    const secondProtocolSlashIndex = scheme.length + \"://\".length\n    const pathnameSlashIndex = urlString.indexOf(\"/\", secondProtocolSlashIndex)\n\n    if (pathnameSlashIndex === -1) return urlString\n    return urlString.slice(0, pathnameSlashIndex)\n  }\n\n  return urlString.slice(0, scheme.length + 1)\n}\n",
    "export const pathnameToParentPathname = (pathname) => {\n  const slashLastIndex = pathname.lastIndexOf(\"/\")\n  if (slashLastIndex === -1) {\n    return \"/\"\n  }\n\n  return pathname.slice(0, slashLastIndex + 1)\n}\n",
    "// could be useful: https://url.spec.whatwg.org/#url-miscellaneous\n\nimport { urlToScheme } from \"./internal/urlToScheme.js\"\nimport { urlToPathname } from \"./internal/urlToPathname.js\"\nimport { urlToOrigin } from \"./internal/urlToOrigin.js\"\nimport { pathnameToParentPathname } from \"./internal/pathnameToParentPathname.js\"\nimport { hasScheme } from \"./internal/hasScheme.js\"\n\nexport const resolveUrl = (specifier, baseUrl) => {\n  if (baseUrl) {\n    if (typeof baseUrl !== \"string\") {\n      throw new TypeError(writeBaseUrlMustBeAString({ baseUrl, specifier }))\n    }\n    if (!hasScheme(baseUrl)) {\n      throw new Error(writeBaseUrlMustBeAbsolute({ baseUrl, specifier }))\n    }\n  }\n\n  if (hasScheme(specifier)) {\n    return specifier\n  }\n\n  if (!baseUrl) {\n    throw new Error(writeBaseUrlRequired({ baseUrl, specifier }))\n  }\n\n  // scheme relative\n  if (specifier.slice(0, 2) === \"//\") {\n    return `${urlToScheme(baseUrl)}:${specifier}`\n  }\n\n  // origin relative\n  if (specifier[0] === \"/\") {\n    return `${urlToOrigin(baseUrl)}${specifier}`\n  }\n\n  const baseOrigin = urlToOrigin(baseUrl)\n  const basePathname = urlToPathname(baseUrl)\n\n  if (specifier === \".\") {\n    const baseDirectoryPathname = pathnameToParentPathname(basePathname)\n    return `${baseOrigin}${baseDirectoryPathname}`\n  }\n\n  // pathname relative inside\n  if (specifier.slice(0, 2) === \"./\") {\n    const baseDirectoryPathname = pathnameToParentPathname(basePathname)\n    return `${baseOrigin}${baseDirectoryPathname}${specifier.slice(2)}`\n  }\n\n  // pathname relative outside\n  if (specifier.slice(0, 3) === \"../\") {\n    let unresolvedPathname = specifier\n    const importerFolders = basePathname.split(\"/\")\n    importerFolders.pop()\n\n    while (unresolvedPathname.slice(0, 3) === \"../\") {\n      unresolvedPathname = unresolvedPathname.slice(3)\n      // when there is no folder left to resolved\n      // we just ignore '../'\n      if (importerFolders.length) {\n        importerFolders.pop()\n      }\n    }\n\n    const resolvedPathname = `${importerFolders.join(\"/\")}/${unresolvedPathname}`\n    return `${baseOrigin}${resolvedPathname}`\n  }\n\n  // bare\n  if (basePathname === \"\") {\n    return `${baseOrigin}/${specifier}`\n  }\n  if (basePathname[basePathname.length] === \"/\") {\n    return `${baseOrigin}${basePathname}${specifier}`\n  }\n  return `${baseOrigin}${pathnameToParentPathname(basePathname)}${specifier}`\n}\n\nconst writeBaseUrlMustBeAString = ({ baseUrl, specifier }) => `baseUrl must be a string.\n--- base url ---\n${baseUrl}\n--- specifier ---\n${specifier}`\n\nconst writeBaseUrlMustBeAbsolute = ({ baseUrl, specifier }) => `baseUrl must be absolute.\n--- base url ---\n${baseUrl}\n--- specifier ---\n${specifier}`\n\nconst writeBaseUrlRequired = ({\n  baseUrl,\n  specifier,\n}) => `baseUrl required to resolve relative specifier.\n--- base url ---\n${baseUrl}\n--- specifier ---\n${specifier}`\n",
    "import { hasScheme } from \"./hasScheme.js\"\nimport { resolveUrl } from \"../resolveUrl.js\"\n\nexport const tryUrlResolution = (string, url) => {\n  const result = resolveUrl(string, url)\n  return hasScheme(result) ? result : null\n}\n",
    "import { hasScheme } from \"./internal/hasScheme.js\"\nimport { resolveUrl } from \"./resolveUrl.js\"\n\nexport const resolveSpecifier = (specifier, importer) => {\n  if (\n    specifier === \".\" ||\n    specifier[0] === \"/\" ||\n    specifier.startsWith(\"./\") ||\n    specifier.startsWith(\"../\")\n  ) {\n    return resolveUrl(specifier, importer)\n  }\n\n  if (hasScheme(specifier)) {\n    return specifier\n  }\n\n  return null\n}\n",
    "import { createDetailedMessage } from \"@jsenv/logger\"\nimport { assertImportMap } from \"./internal/assertImportMap.js\"\nimport { hasScheme } from \"./internal/hasScheme.js\"\nimport { tryUrlResolution } from \"./internal/tryUrlResolution.js\"\nimport { resolveSpecifier } from \"./resolveSpecifier.js\"\n\nexport const applyImportMap = ({\n  importMap,\n  specifier,\n  importer,\n  createBareSpecifierError = ({ specifier, importer }) => {\n    return new Error(createDetailedMessage(`Unmapped bare specifier.`, { specifier, importer }))\n  },\n  onImportMapping = () => {},\n}) => {\n  assertImportMap(importMap)\n  if (typeof specifier !== \"string\") {\n    throw new TypeError(\n      createDetailedMessage(\"specifier must be a string.\", {\n        specifier,\n        importer,\n      }),\n    )\n  }\n  if (importer) {\n    if (typeof importer !== \"string\") {\n      throw new TypeError(\n        createDetailedMessage(\"importer must be a string.\", {\n          importer,\n          specifier,\n        }),\n      )\n    }\n    if (!hasScheme(importer)) {\n      throw new Error(\n        createDetailedMessage(`importer must be an absolute url.`, {\n          importer,\n          specifier,\n        }),\n      )\n    }\n  }\n\n  const specifierUrl = resolveSpecifier(specifier, importer)\n  const specifierNormalized = specifierUrl || specifier\n\n  const { scopes } = importMap\n  if (scopes && importer) {\n    const scopeSpecifierMatching = Object.keys(scopes).find((scopeSpecifier) => {\n      return scopeSpecifier === importer || specifierIsPrefixOf(scopeSpecifier, importer)\n    })\n    if (scopeSpecifierMatching) {\n      const scopeMappings = scopes[scopeSpecifierMatching]\n      const mappingFromScopes = applyMappings(\n        scopeMappings,\n        specifierNormalized,\n        scopeSpecifierMatching,\n        onImportMapping,\n      )\n      if (mappingFromScopes !== null) {\n        return mappingFromScopes\n      }\n    }\n  }\n\n  const { imports } = importMap\n  if (imports) {\n    const mappingFromImports = applyMappings(\n      imports,\n      specifierNormalized,\n      undefined,\n      onImportMapping,\n    )\n    if (mappingFromImports !== null) {\n      return mappingFromImports\n    }\n  }\n\n  if (specifierUrl) {\n    return specifierUrl\n  }\n\n  throw createBareSpecifierError({ specifier, importer })\n}\n\nconst applyMappings = (mappings, specifierNormalized, scope, onImportMapping) => {\n  const specifierCandidates = Object.keys(mappings)\n\n  let i = 0\n  while (i < specifierCandidates.length) {\n    const specifierCandidate = specifierCandidates[i]\n    i++\n    if (specifierCandidate === specifierNormalized) {\n      const address = mappings[specifierCandidate]\n      onImportMapping({\n        scope,\n        from: specifierCandidate,\n        to: address,\n        before: specifierNormalized,\n        after: address,\n      })\n      return address\n    }\n    if (specifierIsPrefixOf(specifierCandidate, specifierNormalized)) {\n      const address = mappings[specifierCandidate]\n      const afterSpecifier = specifierNormalized.slice(specifierCandidate.length)\n      const addressFinal = tryUrlResolution(afterSpecifier, address)\n      onImportMapping({\n        scope,\n        from: specifierCandidate,\n        to: address,\n        before: specifierNormalized,\n        after: addressFinal,\n      })\n      return addressFinal\n    }\n  }\n\n  return null\n}\n\nconst specifierIsPrefixOf = (specifierHref, href) => {\n  return specifierHref[specifierHref.length - 1] === \"/\" && href.startsWith(specifierHref)\n}\n",
    "export default (obj, key, value) => {\n  // Shortcircuit the slow defineProperty path when possible.\n  // We are trying to avoid issues where setters defined on the\n  // prototype cause side effects under the fast path of simple\n  // assignment. By checking for existence of the property with\n  // the in operator, we can optimize most of this overhead away.\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value,\n      enumerable: true,\n      configurable: true,\n      writable: true,\n    })\n  } else {\n    obj[key] = value\n  }\n  return obj\n}\n",
    "import defineProperty from \"../defineProperty/defineProperty.js\"\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object)\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object)\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable\n      })\n    }\n    keys.push.apply(keys, symbols)\n  }\n  return keys\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {}\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        defineProperty(target, key, source[key])\n      })\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source))\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key))\n      })\n    }\n  }\n  return target\n}\n",
    "// https://github.com/systemjs/systemjs/blob/89391f92dfeac33919b0223bbf834a1f4eea5750/src/common.js#L136\nimport { assertImportMap } from \"./internal/assertImportMap.js\"\nimport { resolveUrl } from \"./resolveUrl.js\"\n\nexport const composeTwoImportMaps = (leftImportMap, rightImportMap) => {\n  assertImportMap(leftImportMap)\n  assertImportMap(rightImportMap)\n\n  const importMap = {}\n\n  const leftImports = leftImportMap.imports\n  const rightImports = rightImportMap.imports\n  const leftHasImports = Boolean(leftImports)\n  const rightHasImports = Boolean(rightImports)\n  if (leftHasImports && rightHasImports) {\n    importMap.imports = composeTwoMappings(leftImports, rightImports)\n  } else if (leftHasImports) {\n    importMap.imports = { ...leftImports }\n  } else if (rightHasImports) {\n    importMap.imports = { ...rightImports }\n  }\n\n  const leftScopes = leftImportMap.scopes\n  const rightScopes = rightImportMap.scopes\n  const leftHasScopes = Boolean(leftScopes)\n  const rightHasScopes = Boolean(rightScopes)\n  if (leftHasScopes && rightHasScopes) {\n    importMap.scopes = composeTwoScopes(leftScopes, rightScopes, importMap.imports || {})\n  } else if (leftHasScopes) {\n    importMap.scopes = { ...leftScopes }\n  } else if (rightHasScopes) {\n    importMap.scopes = { ...rightScopes }\n  }\n\n  return importMap\n}\n\nconst composeTwoMappings = (leftMappings, rightMappings) => {\n  const mappings = {}\n\n  Object.keys(leftMappings).forEach((leftSpecifier) => {\n    if (objectHasKey(rightMappings, leftSpecifier)) {\n      // will be overidden\n      return\n    }\n    const leftAddress = leftMappings[leftSpecifier]\n    const rightSpecifier = Object.keys(rightMappings).find((rightSpecifier) => {\n      return compareAddressAndSpecifier(leftAddress, rightSpecifier)\n    })\n    mappings[leftSpecifier] = rightSpecifier ? rightMappings[rightSpecifier] : leftAddress\n  })\n\n  Object.keys(rightMappings).forEach((rightSpecifier) => {\n    mappings[rightSpecifier] = rightMappings[rightSpecifier]\n  })\n\n  return mappings\n}\n\nconst objectHasKey = (object, key) => Object.prototype.hasOwnProperty.call(object, key)\n\nconst compareAddressAndSpecifier = (address, specifier) => {\n  const addressUrl = resolveUrl(address, \"file:///\")\n  const specifierUrl = resolveUrl(specifier, \"file:///\")\n  return addressUrl === specifierUrl\n}\n\nconst composeTwoScopes = (leftScopes, rightScopes, imports) => {\n  const scopes = {}\n\n  Object.keys(leftScopes).forEach((leftScopeKey) => {\n    if (objectHasKey(rightScopes, leftScopeKey)) {\n      // will be merged\n      scopes[leftScopeKey] = leftScopes[leftScopeKey]\n      return\n    }\n    const topLevelSpecifier = Object.keys(imports).find((topLevelSpecifierCandidate) => {\n      return compareAddressAndSpecifier(leftScopeKey, topLevelSpecifierCandidate)\n    })\n    if (topLevelSpecifier) {\n      scopes[imports[topLevelSpecifier]] = leftScopes[leftScopeKey]\n    } else {\n      scopes[leftScopeKey] = leftScopes[leftScopeKey]\n    }\n  })\n\n  Object.keys(rightScopes).forEach((rightScopeKey) => {\n    if (objectHasKey(scopes, rightScopeKey)) {\n      scopes[rightScopeKey] = composeTwoMappings(scopes[rightScopeKey], rightScopes[rightScopeKey])\n    } else {\n      scopes[rightScopeKey] = {\n        ...rightScopes[rightScopeKey],\n      }\n    }\n  })\n\n  return scopes\n}\n",
    "export const getCommonPathname = (pathname, otherPathname) => {\n  const firstDifferentCharacterIndex = findFirstDifferentCharacterIndex(pathname, otherPathname)\n\n  // pathname and otherpathname are exactly the same\n  if (firstDifferentCharacterIndex === -1) {\n    return pathname\n  }\n\n  const commonString = pathname.slice(0, firstDifferentCharacterIndex + 1)\n\n  // the first different char is at firstDifferentCharacterIndex\n  if (pathname.charAt(firstDifferentCharacterIndex) === \"/\") {\n    return commonString\n  }\n\n  if (otherPathname.charAt(firstDifferentCharacterIndex) === \"/\") {\n    return commonString\n  }\n\n  const firstDifferentSlashIndex = commonString.lastIndexOf(\"/\")\n  return pathname.slice(0, firstDifferentSlashIndex + 1)\n}\n\nconst findFirstDifferentCharacterIndex = (string, otherString) => {\n  const maxCommonLength = Math.min(string.length, otherString.length)\n  let i = 0\n  while (i < maxCommonLength) {\n    const char = string.charAt(i)\n    const otherChar = otherString.charAt(i)\n    if (char !== otherChar) {\n      return i\n    }\n    i++\n  }\n  if (string.length === otherString.length) {\n    return -1\n  }\n  // they differ at maxCommonLength\n  return maxCommonLength\n}\n",
    "import { getCommonPathname } from \"./getCommonPathname.js\"\nimport { pathnameToParentPathname } from \"./pathnameToParentPathname.js\"\n\nexport const urlToRelativeUrl = (urlArg, baseUrlArg) => {\n  const url = new URL(urlArg)\n  const baseUrl = new URL(baseUrlArg)\n\n  if (url.protocol !== baseUrl.protocol) {\n    return urlArg\n  }\n\n  if (url.username !== baseUrl.username || url.password !== baseUrl.password) {\n    return urlArg.slice(url.protocol.length)\n  }\n\n  if (url.host !== baseUrl.host) {\n    return urlArg.slice(url.protocol.length)\n  }\n\n  const { pathname, hash, search } = url\n  if (pathname === \"/\") {\n    return baseUrl.pathname.slice(1)\n  }\n\n  const { pathname: basePathname } = baseUrl\n\n  const commonPathname = getCommonPathname(pathname, basePathname)\n  if (!commonPathname) {\n    return urlArg\n  }\n\n  const specificPathname = pathname.slice(commonPathname.length)\n  const baseSpecificPathname = basePathname.slice(commonPathname.length)\n  if (baseSpecificPathname.includes(\"/\")) {\n    const baseSpecificParentPathname = pathnameToParentPathname(baseSpecificPathname)\n    const relativeDirectoriesNotation = baseSpecificParentPathname.replace(/.*?\\//g, \"../\")\n    return `${relativeDirectoriesNotation}${specificPathname}${search}${hash}`\n  }\n  return `${specificPathname}${search}${hash}`\n}\n",
    "import { assertImportMap } from \"./internal/assertImportMap.js\"\nimport { urlToRelativeUrl } from \"./internal/urlToRelativeUrl.js\"\nimport { resolveUrl } from \"./resolveUrl.js\"\nimport { resolveSpecifier } from \"./resolveSpecifier.js\"\nimport { hasScheme } from \"./internal/hasScheme.js\"\n\nexport const moveImportMap = (importMap, fromUrl, toUrl) => {\n  assertImportMap(importMap)\n\n  const makeRelativeTo = (value, type) => {\n    let url\n    if (type === \"specifier\") {\n      url = resolveSpecifier(value, fromUrl)\n      if (!url) {\n        // bare specifier\n        return value\n      }\n    } else {\n      url = resolveUrl(value, fromUrl)\n    }\n\n    const relativeUrl = urlToRelativeUrl(url, toUrl)\n    if (relativeUrl.startsWith(\"../\")) {\n      return relativeUrl\n    }\n    if (relativeUrl.startsWith(\"./\")) {\n      return relativeUrl\n    }\n    if (hasScheme(relativeUrl)) {\n      return relativeUrl\n    }\n    return `./${relativeUrl}`\n  }\n\n  const importMapRelative = {}\n  const { imports } = importMap\n  if (imports) {\n    importMapRelative.imports = makeMappingsRelativeTo(imports, makeRelativeTo) || imports\n  }\n\n  const { scopes } = importMap\n  if (scopes) {\n    importMapRelative.scopes = makeScopesRelativeTo(scopes, makeRelativeTo) || scopes\n  }\n\n  // nothing changed\n  if (importMapRelative.imports === imports && importMapRelative.scopes === scopes) {\n    return importMap\n  }\n  return importMapRelative\n}\n\nconst makeMappingsRelativeTo = (mappings, makeRelativeTo) => {\n  const mappingsTransformed = {}\n  const mappingsRemaining = {}\n  let transformed = false\n  Object.keys(mappings).forEach((specifier) => {\n    const address = mappings[specifier]\n    const specifierRelative = makeRelativeTo(specifier, \"specifier\")\n    const addressRelative = makeRelativeTo(address, \"address\")\n\n    if (specifierRelative) {\n      transformed = true\n      mappingsTransformed[specifierRelative] = addressRelative || address\n    } else if (addressRelative) {\n      transformed = true\n      mappingsTransformed[specifier] = addressRelative\n    } else {\n      mappingsRemaining[specifier] = address\n    }\n  })\n  return transformed ? { ...mappingsTransformed, ...mappingsRemaining } : null\n}\n\nconst makeScopesRelativeTo = (scopes, makeRelativeTo) => {\n  const scopesTransformed = {}\n  const scopesRemaining = {}\n  let transformed = false\n  Object.keys(scopes).forEach((scopeSpecifier) => {\n    const scopeMappings = scopes[scopeSpecifier]\n    const scopeSpecifierRelative = makeRelativeTo(scopeSpecifier, \"address\")\n    const scopeMappingsRelative = makeMappingsRelativeTo(scopeMappings, makeRelativeTo)\n\n    if (scopeSpecifierRelative) {\n      transformed = true\n      scopesTransformed[scopeSpecifierRelative] = scopeMappingsRelative || scopeMappings\n    } else if (scopeMappingsRelative) {\n      transformed = true\n      scopesTransformed[scopeSpecifier] = scopeMappingsRelative\n    } else {\n      scopesRemaining[scopeSpecifier] = scopeMappingsRelative\n    }\n  })\n  return transformed ? { ...scopesTransformed, ...scopesRemaining } : null\n}\n",
    "import { assertImportMap } from \"./internal/assertImportMap.js\"\n\nexport const sortImportMap = (importMap) => {\n  assertImportMap(importMap)\n\n  const { imports, scopes } = importMap\n\n  return {\n    ...(imports ? { imports: sortImports(imports) } : {}),\n    ...(scopes ? { scopes: sortScopes(scopes) } : {}),\n  }\n}\n\nexport const sortImports = (imports) => {\n  const mappingsSorted = {}\n\n  Object.keys(imports)\n    .sort(compareLengthOrLocaleCompare)\n    .forEach((name) => {\n      mappingsSorted[name] = imports[name]\n    })\n\n  return mappingsSorted\n}\n\nexport const sortScopes = (scopes) => {\n  const scopesSorted = {}\n\n  Object.keys(scopes)\n    .sort(compareLengthOrLocaleCompare)\n    .forEach((scopeSpecifier) => {\n      scopesSorted[scopeSpecifier] = sortImports(scopes[scopeSpecifier])\n    })\n\n  return scopesSorted\n}\n\nconst compareLengthOrLocaleCompare = (a, b) => {\n  return b.length - a.length || a.localeCompare(b)\n}\n",
    "import { assertImportMap } from \"./internal/assertImportMap.js\"\nimport { tryUrlResolution } from \"./internal/tryUrlResolution.js\"\nimport { resolveSpecifier } from \"./resolveSpecifier.js\"\nimport { sortImports, sortScopes } from \"./sortImportMap.js\"\n\nexport const normalizeImportMap = (importMap, baseUrl) => {\n  assertImportMap(importMap)\n\n  if (!isStringOrUrl(baseUrl)) {\n    throw new TypeError(formulateBaseUrlMustBeStringOrUrl({ baseUrl }))\n  }\n\n  const { imports, scopes } = importMap\n\n  return {\n    imports: imports ? normalizeMappings(imports, baseUrl) : undefined,\n    scopes: scopes ? normalizeScopes(scopes, baseUrl) : undefined,\n  }\n}\n\nconst isStringOrUrl = (value) => {\n  if (typeof value === \"string\") {\n    return true\n  }\n\n  if (typeof URL === \"function\" && value instanceof URL) {\n    return true\n  }\n\n  return false\n}\n\nconst normalizeMappings = (mappings, baseUrl) => {\n  const mappingsNormalized = {}\n\n  Object.keys(mappings).forEach((specifier) => {\n    const address = mappings[specifier]\n\n    if (typeof address !== \"string\") {\n      console.warn(\n        formulateAddressMustBeAString({\n          address,\n          specifier,\n        }),\n      )\n      return\n    }\n\n    const specifierResolved = resolveSpecifier(specifier, baseUrl) || specifier\n\n    const addressUrl = tryUrlResolution(address, baseUrl)\n    if (addressUrl === null) {\n      console.warn(\n        formulateAdressResolutionFailed({\n          address,\n          baseUrl,\n          specifier,\n        }),\n      )\n      return\n    }\n\n    if (specifier.endsWith(\"/\") && !addressUrl.endsWith(\"/\")) {\n      console.warn(\n        formulateAddressUrlRequiresTrailingSlash({\n          addressUrl,\n          address,\n          specifier,\n        }),\n      )\n      return\n    }\n    mappingsNormalized[specifierResolved] = addressUrl\n  })\n\n  return sortImports(mappingsNormalized)\n}\n\nconst normalizeScopes = (scopes, baseUrl) => {\n  const scopesNormalized = {}\n\n  Object.keys(scopes).forEach((scopeSpecifier) => {\n    const scopeMappings = scopes[scopeSpecifier]\n    const scopeUrl = tryUrlResolution(scopeSpecifier, baseUrl)\n    if (scopeUrl === null) {\n      console.warn(\n        formulateScopeResolutionFailed({\n          scope: scopeSpecifier,\n          baseUrl,\n        }),\n      )\n      return\n    }\n    const scopeValueNormalized = normalizeMappings(scopeMappings, baseUrl)\n    scopesNormalized[scopeUrl] = scopeValueNormalized\n  })\n\n  return sortScopes(scopesNormalized)\n}\n\nconst formulateBaseUrlMustBeStringOrUrl = ({ baseUrl }) => `baseUrl must be a string or an url.\n--- base url ---\n${baseUrl}`\n\nconst formulateAddressMustBeAString = ({ specifier, address }) => `Address must be a string.\n--- address ---\n${address}\n--- specifier ---\n${specifier}`\n\nconst formulateAdressResolutionFailed = ({\n  address,\n  baseUrl,\n  specifier,\n}) => `Address url resolution failed.\n--- address ---\n${address}\n--- base url ---\n${baseUrl}\n--- specifier ---\n${specifier}`\n\nconst formulateAddressUrlRequiresTrailingSlash = ({\n  addressURL,\n  address,\n  specifier,\n}) => `Address must end with /.\n--- address url ---\n${addressURL}\n--- address ---\n${address}\n--- specifier ---\n${specifier}`\n\nconst formulateScopeResolutionFailed = ({ scope, baseUrl }) => `Scope url resolution failed.\n--- scope ---\n${scope}\n--- base url ---\n${baseUrl}`\n",
    "export const pathnameToExtension = (pathname) => {\n  const slashLastIndex = pathname.lastIndexOf(\"/\")\n  if (slashLastIndex !== -1) {\n    pathname = pathname.slice(slashLastIndex + 1)\n  }\n\n  const dotLastIndex = pathname.lastIndexOf(\".\")\n  if (dotLastIndex === -1) return \"\"\n  // if (dotLastIndex === pathname.length - 1) return \"\"\n  return pathname.slice(dotLastIndex)\n}\n",
    "import { urlToPathname } from \"./internal/urlToPathname.js\"\nimport { pathnameToExtension } from \"./internal/pathnameToExtension.js\"\nimport { resolveUrl } from \"./resolveUrl.js\"\nimport { applyImportMap } from \"./applyImportMap.js\"\n\nexport const resolveImport = ({\n  specifier,\n  importer,\n  importMap,\n  defaultExtension = true,\n  createBareSpecifierError,\n  onImportMapping = () => {},\n}) => {\n  return applyDefaultExtension({\n    url: importMap\n      ? applyImportMap({\n          importMap,\n          specifier,\n          importer,\n          createBareSpecifierError,\n          onImportMapping,\n        })\n      : resolveUrl(specifier, importer),\n    importer,\n    defaultExtension,\n  })\n}\n\nconst applyDefaultExtension = ({ url, importer, defaultExtension }) => {\n  if (urlToPathname(url).endsWith(\"/\")) {\n    return url\n  }\n\n  if (typeof defaultExtension === \"string\") {\n    const extension = pathnameToExtension(url)\n    if (extension === \"\") {\n      return `${url}${defaultExtension}`\n    }\n    return url\n  }\n\n  if (defaultExtension === true) {\n    const extension = pathnameToExtension(url)\n    if (extension === \"\" && importer) {\n      const importerPathname = urlToPathname(importer)\n      const importerExtension = pathnameToExtension(importerPathname)\n      return `${url}${importerExtension}`\n    }\n  }\n  return url\n}\n"
  ],
  "names": [
    "createDetailedMessage",
    "message",
    "details",
    "string",
    "Object",
    "keys",
    "forEach",
    "key",
    "value",
    "Array",
    "isArray",
    "join",
    "nativeTypeOf",
    "obj",
    "customTypeOf",
    "Symbol",
    "constructor",
    "prototype",
    "iterator",
    "assertImportMap",
    "TypeError",
    "type",
    "hasScheme",
    "test",
    "urlToScheme",
    "urlString",
    "colonIndex",
    "indexOf",
    "slice",
    "urlToPathname",
    "ressourceToPathname",
    "urlToRessource",
    "scheme",
    "length",
    "afterProtocol",
    "pathnameSlashIndex",
    "ressource",
    "searchSeparatorIndex",
    "urlToOrigin",
    "secondProtocolSlashIndex",
    "pathnameToParentPathname",
    "pathname",
    "slashLastIndex",
    "lastIndexOf",
    "resolveUrl",
    "specifier",
    "baseUrl",
    "writeBaseUrlMustBeAString",
    "Error",
    "writeBaseUrlMustBeAbsolute",
    "writeBaseUrlRequired",
    "baseOrigin",
    "basePathname",
    "baseDirectoryPathname",
    "unresolvedPathname",
    "importerFolders",
    "split",
    "pop",
    "resolvedPathname",
    "tryUrlResolution",
    "url",
    "result",
    "resolveSpecifier",
    "importer",
    "startsWith",
    "applyImportMap",
    "importMap",
    "createBareSpecifierError",
    "onImportMapping",
    "specifierUrl",
    "specifierNormalized",
    "scopes",
    "scopeSpecifierMatching",
    "find",
    "scopeSpecifier",
    "specifierIsPrefixOf",
    "scopeMappings",
    "mappingFromScopes",
    "applyMappings",
    "imports",
    "mappingFromImports",
    "undefined",
    "mappings",
    "scope",
    "specifierCandidates",
    "i",
    "specifierCandidate",
    "address",
    "from",
    "to",
    "before",
    "after",
    "afterSpecifier",
    "addressFinal",
    "specifierHref",
    "href",
    "defineProperty",
    "enumerable",
    "configurable",
    "writable",
    "ownKeys",
    "object",
    "enumerableOnly",
    "getOwnPropertySymbols",
    "symbols",
    "filter",
    "sym",
    "getOwnPropertyDescriptor",
    "push",
    "apply",
    "_objectSpread2",
    "target",
    "arguments",
    "source",
    "getOwnPropertyDescriptors",
    "defineProperties",
    "composeTwoImportMaps",
    "leftImportMap",
    "rightImportMap",
    "leftImports",
    "rightImports",
    "leftHasImports",
    "Boolean",
    "rightHasImports",
    "composeTwoMappings",
    "leftScopes",
    "rightScopes",
    "leftHasScopes",
    "rightHasScopes",
    "composeTwoScopes",
    "leftMappings",
    "rightMappings",
    "leftSpecifier",
    "objectHasKey",
    "leftAddress",
    "rightSpecifier",
    "compareAddressAndSpecifier",
    "hasOwnProperty",
    "call",
    "addressUrl",
    "leftScopeKey",
    "topLevelSpecifier",
    "topLevelSpecifierCandidate",
    "rightScopeKey",
    "getCommonPathname",
    "otherPathname",
    "firstDifferentCharacterIndex",
    "findFirstDifferentCharacterIndex",
    "commonString",
    "charAt",
    "firstDifferentSlashIndex",
    "otherString",
    "maxCommonLength",
    "Math",
    "min",
    "char",
    "otherChar",
    "urlToRelativeUrl",
    "urlArg",
    "baseUrlArg",
    "URL",
    "protocol",
    "username",
    "password",
    "host",
    "hash",
    "search",
    "commonPathname",
    "specificPathname",
    "baseSpecificPathname",
    "includes",
    "baseSpecificParentPathname",
    "relativeDirectoriesNotation",
    "replace",
    "moveImportMap",
    "fromUrl",
    "toUrl",
    "makeRelativeTo",
    "relativeUrl",
    "importMapRelative",
    "makeMappingsRelativeTo",
    "makeScopesRelativeTo",
    "mappingsTransformed",
    "mappingsRemaining",
    "transformed",
    "specifierRelative",
    "addressRelative",
    "scopesTransformed",
    "scopesRemaining",
    "scopeSpecifierRelative",
    "scopeMappingsRelative",
    "sortImportMap",
    "sortImports",
    "sortScopes",
    "mappingsSorted",
    "sort",
    "compareLengthOrLocaleCompare",
    "name",
    "scopesSorted",
    "a",
    "b",
    "localeCompare",
    "normalizeImportMap",
    "isStringOrUrl",
    "formulateBaseUrlMustBeStringOrUrl",
    "normalizeMappings",
    "normalizeScopes",
    "mappingsNormalized",
    "console",
    "warn",
    "formulateAddressMustBeAString",
    "specifierResolved",
    "formulateAdressResolutionFailed",
    "endsWith",
    "formulateAddressUrlRequiresTrailingSlash",
    "scopesNormalized",
    "scopeUrl",
    "formulateScopeResolutionFailed",
    "scopeValueNormalized",
    "addressURL",
    "pathnameToExtension",
    "dotLastIndex",
    "resolveImport",
    "defaultExtension",
    "applyDefaultExtension",
    "extension",
    "importerPathname",
    "importerExtension"
  ],
  "mappings": "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"
}