{
  "version": 3,
  "file": "jsenv_importmap.js",
  "sources": [
    "../../node_modules/@jsenv/logger/src/createDetailedMessage.js",
    "../../src/internal/assertImportMap.js",
    "../../src/internal/hasScheme.js",
    "../../src/internal/urlToScheme.js",
    "../../src/internal/urlToPathname.js",
    "../../src/internal/urlToOrigin.js",
    "../../src/internal/pathnameToParentPathname.js",
    "../../src/resolveUrl.js",
    "../../src/internal/tryUrlResolution.js",
    "../../src/resolveSpecifier.js",
    "../../src/applyImportMap.js",
    "../../src/composeTwoImportMaps.js",
    "../../src/internal/getCommonPathname.js",
    "../../src/internal/urlToRelativeUrl.js",
    "../../src/moveImportMap.js",
    "../../src/sortImportMap.js",
    "../../src/normalizeImportMap.js",
    "../../src/internal/pathnameToExtension.js",
    "../../src/resolveImport.js"
  ],
  "sourcesContent": [
    "export const createDetailedMessage = (message, details = {}) => {\n  let string = `${message}`\n\n  Object.keys(details).forEach((key) => {\n    const value = details[key]\n    string += `\n--- ${key} ---\n${\n  Array.isArray(value)\n    ? value.join(`\n`)\n    : value\n}`\n  })\n\n  return string\n}\n",
    "export const assertImportMap = (value) => {\n  if (value === null) {\n    throw new TypeError(`an importMap must be an object, got null`)\n  }\n\n  const type = typeof value\n  if (type !== \"object\") {\n    throw new TypeError(`an importMap must be an object, received ${value}`)\n  }\n\n  if (Array.isArray(value)) {\n    throw new TypeError(\n      `an importMap must be an object, received array ${value}`,\n    )\n  }\n}\n",
    "export const hasScheme = (string) => {\n  return /^[a-zA-Z]{2,}:/.test(string)\n}\n",
    "export const urlToScheme = (urlString) => {\n  const colonIndex = urlString.indexOf(\":\")\n  if (colonIndex === -1) return \"\"\n  return urlString.slice(0, colonIndex)\n}\n",
    "import { urlToScheme } from \"./urlToScheme.js\"\n\nexport const urlToPathname = (urlString) => {\n  return ressourceToPathname(urlToRessource(urlString))\n}\n\nconst urlToRessource = (urlString) => {\n  const scheme = urlToScheme(urlString)\n\n  if (scheme === \"file\") {\n    return urlString.slice(\"file://\".length)\n  }\n\n  if (scheme === \"https\" || scheme === \"http\") {\n    // remove origin\n    const afterProtocol = urlString.slice(scheme.length + \"://\".length)\n    const pathnameSlashIndex = afterProtocol.indexOf(\"/\", \"://\".length)\n    return afterProtocol.slice(pathnameSlashIndex)\n  }\n\n  return urlString.slice(scheme.length + 1)\n}\n\nconst ressourceToPathname = (ressource) => {\n  const searchSeparatorIndex = ressource.indexOf(\"?\")\n  return searchSeparatorIndex === -1\n    ? ressource\n    : ressource.slice(0, searchSeparatorIndex)\n}\n",
    "import { urlToScheme } from \"./urlToScheme.js\"\n\nexport const urlToOrigin = (urlString) => {\n  const scheme = urlToScheme(urlString)\n\n  if (scheme === \"file\") {\n    return \"file://\"\n  }\n\n  if (scheme === \"http\" || scheme === \"https\") {\n    const secondProtocolSlashIndex = scheme.length + \"://\".length\n    const pathnameSlashIndex = urlString.indexOf(\"/\", secondProtocolSlashIndex)\n\n    if (pathnameSlashIndex === -1) return urlString\n    return urlString.slice(0, pathnameSlashIndex)\n  }\n\n  return urlString.slice(0, scheme.length + 1)\n}\n",
    "export const pathnameToParentPathname = (pathname) => {\n  const slashLastIndex = pathname.lastIndexOf(\"/\")\n  if (slashLastIndex === -1) {\n    return \"/\"\n  }\n\n  return pathname.slice(0, slashLastIndex + 1)\n}\n",
    "// could be useful: https://url.spec.whatwg.org/#url-miscellaneous\n\nimport { urlToScheme } from \"./internal/urlToScheme.js\"\nimport { urlToPathname } from \"./internal/urlToPathname.js\"\nimport { urlToOrigin } from \"./internal/urlToOrigin.js\"\nimport { pathnameToParentPathname } from \"./internal/pathnameToParentPathname.js\"\nimport { hasScheme } from \"./internal/hasScheme.js\"\n\nexport const resolveUrl = (specifier, baseUrl) => {\n  if (baseUrl) {\n    if (typeof baseUrl !== \"string\") {\n      throw new TypeError(writeBaseUrlMustBeAString({ baseUrl, specifier }))\n    }\n    if (!hasScheme(baseUrl)) {\n      throw new Error(writeBaseUrlMustBeAbsolute({ baseUrl, specifier }))\n    }\n  }\n\n  if (hasScheme(specifier)) {\n    return specifier\n  }\n\n  if (!baseUrl) {\n    throw new Error(writeBaseUrlRequired({ baseUrl, specifier }))\n  }\n\n  // scheme relative\n  if (specifier.slice(0, 2) === \"//\") {\n    return `${urlToScheme(baseUrl)}:${specifier}`\n  }\n\n  // origin relative\n  if (specifier[0] === \"/\") {\n    return `${urlToOrigin(baseUrl)}${specifier}`\n  }\n\n  const baseOrigin = urlToOrigin(baseUrl)\n  const basePathname = urlToPathname(baseUrl)\n\n  if (specifier === \".\") {\n    const baseDirectoryPathname = pathnameToParentPathname(basePathname)\n    return `${baseOrigin}${baseDirectoryPathname}`\n  }\n\n  // pathname relative inside\n  if (specifier.slice(0, 2) === \"./\") {\n    const baseDirectoryPathname = pathnameToParentPathname(basePathname)\n    return `${baseOrigin}${baseDirectoryPathname}${specifier.slice(2)}`\n  }\n\n  // pathname relative outside\n  if (specifier.slice(0, 3) === \"../\") {\n    let unresolvedPathname = specifier\n    const importerFolders = basePathname.split(\"/\")\n    importerFolders.pop()\n\n    while (unresolvedPathname.slice(0, 3) === \"../\") {\n      unresolvedPathname = unresolvedPathname.slice(3)\n      // when there is no folder left to resolved\n      // we just ignore '../'\n      if (importerFolders.length) {\n        importerFolders.pop()\n      }\n    }\n\n    const resolvedPathname = `${importerFolders.join(\n      \"/\",\n    )}/${unresolvedPathname}`\n    return `${baseOrigin}${resolvedPathname}`\n  }\n\n  // bare\n  if (basePathname === \"\") {\n    return `${baseOrigin}/${specifier}`\n  }\n  if (basePathname[basePathname.length] === \"/\") {\n    return `${baseOrigin}${basePathname}${specifier}`\n  }\n  return `${baseOrigin}${pathnameToParentPathname(basePathname)}${specifier}`\n}\n\nconst writeBaseUrlMustBeAString = ({\n  baseUrl,\n  specifier,\n}) => `baseUrl must be a string.\n--- base url ---\n${baseUrl}\n--- specifier ---\n${specifier}`\n\nconst writeBaseUrlMustBeAbsolute = ({\n  baseUrl,\n  specifier,\n}) => `baseUrl must be absolute.\n--- base url ---\n${baseUrl}\n--- specifier ---\n${specifier}`\n\nconst writeBaseUrlRequired = ({\n  baseUrl,\n  specifier,\n}) => `baseUrl required to resolve relative specifier.\n--- base url ---\n${baseUrl}\n--- specifier ---\n${specifier}`\n",
    "import { hasScheme } from \"./hasScheme.js\"\nimport { resolveUrl } from \"../resolveUrl.js\"\n\nexport const tryUrlResolution = (string, url) => {\n  const result = resolveUrl(string, url)\n  return hasScheme(result) ? result : null\n}\n",
    "import { hasScheme } from \"./internal/hasScheme.js\"\nimport { resolveUrl } from \"./resolveUrl.js\"\n\nexport const resolveSpecifier = (specifier, importer) => {\n  if (\n    specifier === \".\" ||\n    specifier[0] === \"/\" ||\n    specifier.startsWith(\"./\") ||\n    specifier.startsWith(\"../\")\n  ) {\n    return resolveUrl(specifier, importer)\n  }\n\n  if (hasScheme(specifier)) {\n    return specifier\n  }\n\n  return null\n}\n",
    "import { createDetailedMessage } from \"@jsenv/logger\"\nimport { assertImportMap } from \"./internal/assertImportMap.js\"\nimport { hasScheme } from \"./internal/hasScheme.js\"\nimport { tryUrlResolution } from \"./internal/tryUrlResolution.js\"\nimport { resolveSpecifier } from \"./resolveSpecifier.js\"\n\nexport const applyImportMap = ({\n  importMap,\n  specifier,\n  importer,\n  createBareSpecifierError = ({ specifier, importer }) => {\n    return new Error(\n      createDetailedMessage(`Unmapped bare specifier.`, {\n        specifier,\n        importer,\n      }),\n    )\n  },\n  onImportMapping = () => {},\n}) => {\n  assertImportMap(importMap)\n  if (typeof specifier !== \"string\") {\n    throw new TypeError(\n      createDetailedMessage(\"specifier must be a string.\", {\n        specifier,\n        importer,\n      }),\n    )\n  }\n  if (importer) {\n    if (typeof importer !== \"string\") {\n      throw new TypeError(\n        createDetailedMessage(\"importer must be a string.\", {\n          importer,\n          specifier,\n        }),\n      )\n    }\n    if (!hasScheme(importer)) {\n      throw new Error(\n        createDetailedMessage(`importer must be an absolute url.`, {\n          importer,\n          specifier,\n        }),\n      )\n    }\n  }\n\n  const specifierUrl = resolveSpecifier(specifier, importer)\n  const specifierNormalized = specifierUrl || specifier\n\n  const { scopes } = importMap\n  if (scopes && importer) {\n    const scopeSpecifierMatching = Object.keys(scopes).find(\n      (scopeSpecifier) => {\n        return (\n          scopeSpecifier === importer ||\n          specifierIsPrefixOf(scopeSpecifier, importer)\n        )\n      },\n    )\n    if (scopeSpecifierMatching) {\n      const scopeMappings = scopes[scopeSpecifierMatching]\n      const mappingFromScopes = applyMappings(\n        scopeMappings,\n        specifierNormalized,\n        scopeSpecifierMatching,\n        onImportMapping,\n      )\n      if (mappingFromScopes !== null) {\n        return mappingFromScopes\n      }\n    }\n  }\n\n  const { imports } = importMap\n  if (imports) {\n    const mappingFromImports = applyMappings(\n      imports,\n      specifierNormalized,\n      undefined,\n      onImportMapping,\n    )\n    if (mappingFromImports !== null) {\n      return mappingFromImports\n    }\n  }\n\n  if (specifierUrl) {\n    return specifierUrl\n  }\n\n  throw createBareSpecifierError({ specifier, importer })\n}\n\nconst applyMappings = (\n  mappings,\n  specifierNormalized,\n  scope,\n  onImportMapping,\n) => {\n  const specifierCandidates = Object.keys(mappings)\n\n  let i = 0\n  while (i < specifierCandidates.length) {\n    const specifierCandidate = specifierCandidates[i]\n    i++\n    if (specifierCandidate === specifierNormalized) {\n      const address = mappings[specifierCandidate]\n      onImportMapping({\n        scope,\n        from: specifierCandidate,\n        to: address,\n        before: specifierNormalized,\n        after: address,\n      })\n      return address\n    }\n    if (specifierIsPrefixOf(specifierCandidate, specifierNormalized)) {\n      const address = mappings[specifierCandidate]\n      const afterSpecifier = specifierNormalized.slice(\n        specifierCandidate.length,\n      )\n      const addressFinal = tryUrlResolution(afterSpecifier, address)\n      onImportMapping({\n        scope,\n        from: specifierCandidate,\n        to: address,\n        before: specifierNormalized,\n        after: addressFinal,\n      })\n      return addressFinal\n    }\n  }\n\n  return null\n}\n\nconst specifierIsPrefixOf = (specifierHref, href) => {\n  return (\n    specifierHref[specifierHref.length - 1] === \"/\" &&\n    href.startsWith(specifierHref)\n  )\n}\n",
    "// https://github.com/systemjs/systemjs/blob/89391f92dfeac33919b0223bbf834a1f4eea5750/src/common.js#L136\nimport { assertImportMap } from \"./internal/assertImportMap.js\"\nimport { resolveUrl } from \"./resolveUrl.js\"\n\nexport const composeTwoImportMaps = (leftImportMap, rightImportMap) => {\n  assertImportMap(leftImportMap)\n  assertImportMap(rightImportMap)\n\n  const importMap = {}\n\n  const leftImports = leftImportMap.imports\n  const rightImports = rightImportMap.imports\n  const leftHasImports = Boolean(leftImports)\n  const rightHasImports = Boolean(rightImports)\n  if (leftHasImports && rightHasImports) {\n    importMap.imports = composeTwoMappings(leftImports, rightImports)\n  } else if (leftHasImports) {\n    importMap.imports = { ...leftImports }\n  } else if (rightHasImports) {\n    importMap.imports = { ...rightImports }\n  }\n\n  const leftScopes = leftImportMap.scopes\n  const rightScopes = rightImportMap.scopes\n  const leftHasScopes = Boolean(leftScopes)\n  const rightHasScopes = Boolean(rightScopes)\n  if (leftHasScopes && rightHasScopes) {\n    importMap.scopes = composeTwoScopes(\n      leftScopes,\n      rightScopes,\n      importMap.imports || {},\n    )\n  } else if (leftHasScopes) {\n    importMap.scopes = { ...leftScopes }\n  } else if (rightHasScopes) {\n    importMap.scopes = { ...rightScopes }\n  }\n\n  return importMap\n}\n\nconst composeTwoMappings = (leftMappings, rightMappings) => {\n  const mappings = {}\n\n  Object.keys(leftMappings).forEach((leftSpecifier) => {\n    if (objectHasKey(rightMappings, leftSpecifier)) {\n      // will be overidden\n      return\n    }\n    const leftAddress = leftMappings[leftSpecifier]\n    const rightSpecifier = Object.keys(rightMappings).find((rightSpecifier) => {\n      return compareAddressAndSpecifier(leftAddress, rightSpecifier)\n    })\n    mappings[leftSpecifier] = rightSpecifier\n      ? rightMappings[rightSpecifier]\n      : leftAddress\n  })\n\n  Object.keys(rightMappings).forEach((rightSpecifier) => {\n    mappings[rightSpecifier] = rightMappings[rightSpecifier]\n  })\n\n  return mappings\n}\n\nconst objectHasKey = (object, key) =>\n  Object.prototype.hasOwnProperty.call(object, key)\n\nconst compareAddressAndSpecifier = (address, specifier) => {\n  const addressUrl = resolveUrl(address, \"file:///\")\n  const specifierUrl = resolveUrl(specifier, \"file:///\")\n  return addressUrl === specifierUrl\n}\n\nconst composeTwoScopes = (leftScopes, rightScopes, imports) => {\n  const scopes = {}\n\n  Object.keys(leftScopes).forEach((leftScopeKey) => {\n    if (objectHasKey(rightScopes, leftScopeKey)) {\n      // will be merged\n      scopes[leftScopeKey] = leftScopes[leftScopeKey]\n      return\n    }\n    const topLevelSpecifier = Object.keys(imports).find(\n      (topLevelSpecifierCandidate) => {\n        return compareAddressAndSpecifier(\n          leftScopeKey,\n          topLevelSpecifierCandidate,\n        )\n      },\n    )\n    if (topLevelSpecifier) {\n      scopes[imports[topLevelSpecifier]] = leftScopes[leftScopeKey]\n    } else {\n      scopes[leftScopeKey] = leftScopes[leftScopeKey]\n    }\n  })\n\n  Object.keys(rightScopes).forEach((rightScopeKey) => {\n    if (objectHasKey(scopes, rightScopeKey)) {\n      scopes[rightScopeKey] = composeTwoMappings(\n        scopes[rightScopeKey],\n        rightScopes[rightScopeKey],\n      )\n    } else {\n      scopes[rightScopeKey] = {\n        ...rightScopes[rightScopeKey],\n      }\n    }\n  })\n\n  return scopes\n}\n",
    "export const getCommonPathname = (pathname, otherPathname) => {\n  const firstDifferentCharacterIndex = findFirstDifferentCharacterIndex(\n    pathname,\n    otherPathname,\n  )\n\n  // pathname and otherpathname are exactly the same\n  if (firstDifferentCharacterIndex === -1) {\n    return pathname\n  }\n\n  const commonString = pathname.slice(0, firstDifferentCharacterIndex + 1)\n\n  // the first different char is at firstDifferentCharacterIndex\n  if (pathname.charAt(firstDifferentCharacterIndex) === \"/\") {\n    return commonString\n  }\n\n  if (otherPathname.charAt(firstDifferentCharacterIndex) === \"/\") {\n    return commonString\n  }\n\n  const firstDifferentSlashIndex = commonString.lastIndexOf(\"/\")\n  return pathname.slice(0, firstDifferentSlashIndex + 1)\n}\n\nconst findFirstDifferentCharacterIndex = (string, otherString) => {\n  const maxCommonLength = Math.min(string.length, otherString.length)\n  let i = 0\n  while (i < maxCommonLength) {\n    const char = string.charAt(i)\n    const otherChar = otherString.charAt(i)\n    if (char !== otherChar) {\n      return i\n    }\n    i++\n  }\n  if (string.length === otherString.length) {\n    return -1\n  }\n  // they differ at maxCommonLength\n  return maxCommonLength\n}\n",
    "import { getCommonPathname } from \"./getCommonPathname.js\"\nimport { pathnameToParentPathname } from \"./pathnameToParentPathname.js\"\n\nexport const urlToRelativeUrl = (urlArg, baseUrlArg) => {\n  const url = new URL(urlArg)\n  const baseUrl = new URL(baseUrlArg)\n\n  if (url.protocol !== baseUrl.protocol) {\n    return urlArg\n  }\n\n  if (url.username !== baseUrl.username || url.password !== baseUrl.password) {\n    return urlArg.slice(url.protocol.length)\n  }\n\n  if (url.host !== baseUrl.host) {\n    return urlArg.slice(url.protocol.length)\n  }\n\n  const { pathname, hash, search } = url\n  if (pathname === \"/\") {\n    return baseUrl.pathname.slice(1)\n  }\n\n  const { pathname: basePathname } = baseUrl\n\n  const commonPathname = getCommonPathname(pathname, basePathname)\n  if (!commonPathname) {\n    return urlArg\n  }\n\n  const specificPathname = pathname.slice(commonPathname.length)\n  const baseSpecificPathname = basePathname.slice(commonPathname.length)\n  if (baseSpecificPathname.includes(\"/\")) {\n    const baseSpecificParentPathname =\n      pathnameToParentPathname(baseSpecificPathname)\n    const relativeDirectoriesNotation = baseSpecificParentPathname.replace(\n      /.*?\\//g,\n      \"../\",\n    )\n    return `${relativeDirectoriesNotation}${specificPathname}${search}${hash}`\n  }\n  return `${specificPathname}${search}${hash}`\n}\n",
    "import { assertImportMap } from \"./internal/assertImportMap.js\"\nimport { urlToRelativeUrl } from \"./internal/urlToRelativeUrl.js\"\nimport { resolveUrl } from \"./resolveUrl.js\"\nimport { resolveSpecifier } from \"./resolveSpecifier.js\"\nimport { hasScheme } from \"./internal/hasScheme.js\"\n\nexport const moveImportMap = (importMap, fromUrl, toUrl) => {\n  assertImportMap(importMap)\n\n  const makeRelativeTo = (value, type) => {\n    let url\n    if (type === \"specifier\") {\n      url = resolveSpecifier(value, fromUrl)\n      if (!url) {\n        // bare specifier\n        return value\n      }\n    } else {\n      url = resolveUrl(value, fromUrl)\n    }\n\n    const relativeUrl = urlToRelativeUrl(url, toUrl)\n    if (relativeUrl.startsWith(\"../\")) {\n      return relativeUrl\n    }\n    if (relativeUrl.startsWith(\"./\")) {\n      return relativeUrl\n    }\n    if (hasScheme(relativeUrl)) {\n      return relativeUrl\n    }\n    return `./${relativeUrl}`\n  }\n\n  const importMapRelative = {}\n  const { imports } = importMap\n  if (imports) {\n    importMapRelative.imports =\n      makeMappingsRelativeTo(imports, makeRelativeTo) || imports\n  }\n\n  const { scopes } = importMap\n  if (scopes) {\n    importMapRelative.scopes =\n      makeScopesRelativeTo(scopes, makeRelativeTo) || scopes\n  }\n\n  // nothing changed\n  if (\n    importMapRelative.imports === imports &&\n    importMapRelative.scopes === scopes\n  ) {\n    return importMap\n  }\n  return importMapRelative\n}\n\nconst makeMappingsRelativeTo = (mappings, makeRelativeTo) => {\n  const mappingsTransformed = {}\n  const mappingsRemaining = {}\n  let transformed = false\n  Object.keys(mappings).forEach((specifier) => {\n    const address = mappings[specifier]\n    const specifierRelative = makeRelativeTo(specifier, \"specifier\")\n    const addressRelative = makeRelativeTo(address, \"address\")\n\n    if (specifierRelative) {\n      transformed = true\n      mappingsTransformed[specifierRelative] = addressRelative || address\n    } else if (addressRelative) {\n      transformed = true\n      mappingsTransformed[specifier] = addressRelative\n    } else {\n      mappingsRemaining[specifier] = address\n    }\n  })\n  return transformed ? { ...mappingsTransformed, ...mappingsRemaining } : null\n}\n\nconst makeScopesRelativeTo = (scopes, makeRelativeTo) => {\n  const scopesTransformed = {}\n  const scopesRemaining = {}\n  let transformed = false\n  Object.keys(scopes).forEach((scopeSpecifier) => {\n    const scopeMappings = scopes[scopeSpecifier]\n    const scopeSpecifierRelative = makeRelativeTo(scopeSpecifier, \"address\")\n    const scopeMappingsRelative = makeMappingsRelativeTo(\n      scopeMappings,\n      makeRelativeTo,\n    )\n\n    if (scopeSpecifierRelative) {\n      transformed = true\n      scopesTransformed[scopeSpecifierRelative] =\n        scopeMappingsRelative || scopeMappings\n    } else if (scopeMappingsRelative) {\n      transformed = true\n      scopesTransformed[scopeSpecifier] = scopeMappingsRelative\n    } else {\n      scopesRemaining[scopeSpecifier] = scopeMappingsRelative\n    }\n  })\n  return transformed ? { ...scopesTransformed, ...scopesRemaining } : null\n}\n",
    "import { assertImportMap } from \"./internal/assertImportMap.js\"\n\nexport const sortImportMap = (importMap) => {\n  assertImportMap(importMap)\n\n  const { imports, scopes } = importMap\n\n  return {\n    ...(imports ? { imports: sortImports(imports) } : {}),\n    ...(scopes ? { scopes: sortScopes(scopes) } : {}),\n  }\n}\n\nexport const sortImports = (imports) => {\n  const mappingsSorted = {}\n\n  Object.keys(imports)\n    .sort(compareLengthOrLocaleCompare)\n    .forEach((name) => {\n      mappingsSorted[name] = imports[name]\n    })\n\n  return mappingsSorted\n}\n\nexport const sortScopes = (scopes) => {\n  const scopesSorted = {}\n\n  Object.keys(scopes)\n    .sort(compareLengthOrLocaleCompare)\n    .forEach((scopeSpecifier) => {\n      scopesSorted[scopeSpecifier] = sortImports(scopes[scopeSpecifier])\n    })\n\n  return scopesSorted\n}\n\nconst compareLengthOrLocaleCompare = (a, b) => {\n  return b.length - a.length || a.localeCompare(b)\n}\n",
    "import { assertImportMap } from \"./internal/assertImportMap.js\"\nimport { tryUrlResolution } from \"./internal/tryUrlResolution.js\"\nimport { resolveSpecifier } from \"./resolveSpecifier.js\"\nimport { sortImports, sortScopes } from \"./sortImportMap.js\"\n\nexport const normalizeImportMap = (importMap, baseUrl) => {\n  assertImportMap(importMap)\n\n  if (!isStringOrUrl(baseUrl)) {\n    throw new TypeError(formulateBaseUrlMustBeStringOrUrl({ baseUrl }))\n  }\n\n  const { imports, scopes } = importMap\n\n  return {\n    imports: imports ? normalizeMappings(imports, baseUrl) : undefined,\n    scopes: scopes ? normalizeScopes(scopes, baseUrl) : undefined,\n  }\n}\n\nconst isStringOrUrl = (value) => {\n  if (typeof value === \"string\") {\n    return true\n  }\n\n  if (typeof URL === \"function\" && value instanceof URL) {\n    return true\n  }\n\n  return false\n}\n\nconst normalizeMappings = (mappings, baseUrl) => {\n  const mappingsNormalized = {}\n\n  Object.keys(mappings).forEach((specifier) => {\n    const address = mappings[specifier]\n\n    if (typeof address !== \"string\") {\n      console.warn(\n        formulateAddressMustBeAString({\n          address,\n          specifier,\n        }),\n      )\n      return\n    }\n\n    const specifierResolved = resolveSpecifier(specifier, baseUrl) || specifier\n\n    const addressUrl = tryUrlResolution(address, baseUrl)\n    if (addressUrl === null) {\n      console.warn(\n        formulateAdressResolutionFailed({\n          address,\n          baseUrl,\n          specifier,\n        }),\n      )\n      return\n    }\n\n    if (specifier.endsWith(\"/\") && !addressUrl.endsWith(\"/\")) {\n      console.warn(\n        formulateAddressUrlRequiresTrailingSlash({\n          addressUrl,\n          address,\n          specifier,\n        }),\n      )\n      return\n    }\n    mappingsNormalized[specifierResolved] = addressUrl\n  })\n\n  return sortImports(mappingsNormalized)\n}\n\nconst normalizeScopes = (scopes, baseUrl) => {\n  const scopesNormalized = {}\n\n  Object.keys(scopes).forEach((scopeSpecifier) => {\n    const scopeMappings = scopes[scopeSpecifier]\n    const scopeUrl = tryUrlResolution(scopeSpecifier, baseUrl)\n    if (scopeUrl === null) {\n      console.warn(\n        formulateScopeResolutionFailed({\n          scope: scopeSpecifier,\n          baseUrl,\n        }),\n      )\n      return\n    }\n    const scopeValueNormalized = normalizeMappings(scopeMappings, baseUrl)\n    scopesNormalized[scopeUrl] = scopeValueNormalized\n  })\n\n  return sortScopes(scopesNormalized)\n}\n\nconst formulateBaseUrlMustBeStringOrUrl = ({\n  baseUrl,\n}) => `baseUrl must be a string or an url.\n--- base url ---\n${baseUrl}`\n\nconst formulateAddressMustBeAString = ({\n  specifier,\n  address,\n}) => `Address must be a string.\n--- address ---\n${address}\n--- specifier ---\n${specifier}`\n\nconst formulateAdressResolutionFailed = ({\n  address,\n  baseUrl,\n  specifier,\n}) => `Address url resolution failed.\n--- address ---\n${address}\n--- base url ---\n${baseUrl}\n--- specifier ---\n${specifier}`\n\nconst formulateAddressUrlRequiresTrailingSlash = ({\n  addressURL,\n  address,\n  specifier,\n}) => `Address must end with /.\n--- address url ---\n${addressURL}\n--- address ---\n${address}\n--- specifier ---\n${specifier}`\n\nconst formulateScopeResolutionFailed = ({\n  scope,\n  baseUrl,\n}) => `Scope url resolution failed.\n--- scope ---\n${scope}\n--- base url ---\n${baseUrl}`\n",
    "export const pathnameToExtension = (pathname) => {\n  const slashLastIndex = pathname.lastIndexOf(\"/\")\n  if (slashLastIndex !== -1) {\n    pathname = pathname.slice(slashLastIndex + 1)\n  }\n\n  const dotLastIndex = pathname.lastIndexOf(\".\")\n  if (dotLastIndex === -1) return \"\"\n  // if (dotLastIndex === pathname.length - 1) return \"\"\n  return pathname.slice(dotLastIndex)\n}\n",
    "import { urlToPathname } from \"./internal/urlToPathname.js\"\nimport { pathnameToExtension } from \"./internal/pathnameToExtension.js\"\nimport { resolveUrl } from \"./resolveUrl.js\"\nimport { applyImportMap } from \"./applyImportMap.js\"\n\nexport const resolveImport = ({\n  specifier,\n  importer,\n  importMap,\n  defaultExtension = false,\n  createBareSpecifierError,\n  onImportMapping = () => {},\n}) => {\n  let url\n  if (importMap) {\n    url = applyImportMap({\n      importMap,\n      specifier,\n      importer,\n      createBareSpecifierError,\n      onImportMapping,\n    })\n  } else {\n    url = resolveUrl(specifier, importer)\n  }\n\n  if (defaultExtension) {\n    url = applyDefaultExtension({ url, importer, defaultExtension })\n  }\n\n  return url\n}\n\nconst applyDefaultExtension = ({ url, importer, defaultExtension }) => {\n  if (urlToPathname(url).endsWith(\"/\")) {\n    return url\n  }\n\n  if (typeof defaultExtension === \"string\") {\n    const extension = pathnameToExtension(url)\n    if (extension === \"\") {\n      return `${url}${defaultExtension}`\n    }\n    return url\n  }\n\n  if (defaultExtension === true) {\n    const extension = pathnameToExtension(url)\n    if (extension === \"\" && importer) {\n      const importerPathname = urlToPathname(importer)\n      const importerExtension = pathnameToExtension(importerPathname)\n      return `${url}${importerExtension}`\n    }\n  }\n\n  return url\n}\n"
  ],
  "names": [
    "createDetailedMessage",
    "message",
    "details",
    "string",
    "Object",
    "keys",
    "forEach",
    "key",
    "value",
    "Array",
    "isArray",
    "join",
    "assertImportMap",
    "TypeError",
    "type",
    "hasScheme",
    "test",
    "urlToScheme",
    "urlString",
    "colonIndex",
    "indexOf",
    "slice",
    "urlToPathname",
    "ressourceToPathname",
    "urlToRessource",
    "scheme",
    "length",
    "afterProtocol",
    "pathnameSlashIndex",
    "ressource",
    "searchSeparatorIndex",
    "urlToOrigin",
    "secondProtocolSlashIndex",
    "pathnameToParentPathname",
    "pathname",
    "slashLastIndex",
    "lastIndexOf",
    "resolveUrl",
    "specifier",
    "baseUrl",
    "writeBaseUrlMustBeAString",
    "Error",
    "writeBaseUrlMustBeAbsolute",
    "writeBaseUrlRequired",
    "baseOrigin",
    "basePathname",
    "baseDirectoryPathname",
    "unresolvedPathname",
    "importerFolders",
    "split",
    "pop",
    "resolvedPathname",
    "tryUrlResolution",
    "url",
    "result",
    "resolveSpecifier",
    "importer",
    "startsWith",
    "applyImportMap",
    "importMap",
    "createBareSpecifierError",
    "onImportMapping",
    "specifierUrl",
    "specifierNormalized",
    "scopes",
    "scopeSpecifierMatching",
    "find",
    "scopeSpecifier",
    "specifierIsPrefixOf",
    "scopeMappings",
    "mappingFromScopes",
    "applyMappings",
    "imports",
    "mappingFromImports",
    "undefined",
    "mappings",
    "scope",
    "specifierCandidates",
    "i",
    "specifierCandidate",
    "address",
    "from",
    "to",
    "before",
    "after",
    "afterSpecifier",
    "addressFinal",
    "specifierHref",
    "href",
    "composeTwoImportMaps",
    "leftImportMap",
    "rightImportMap",
    "leftImports",
    "rightImports",
    "leftHasImports",
    "Boolean",
    "rightHasImports",
    "composeTwoMappings",
    "leftScopes",
    "rightScopes",
    "leftHasScopes",
    "rightHasScopes",
    "composeTwoScopes",
    "leftMappings",
    "rightMappings",
    "leftSpecifier",
    "objectHasKey",
    "leftAddress",
    "rightSpecifier",
    "compareAddressAndSpecifier",
    "object",
    "prototype",
    "hasOwnProperty",
    "call",
    "addressUrl",
    "leftScopeKey",
    "topLevelSpecifier",
    "topLevelSpecifierCandidate",
    "rightScopeKey",
    "getCommonPathname",
    "otherPathname",
    "firstDifferentCharacterIndex",
    "findFirstDifferentCharacterIndex",
    "commonString",
    "charAt",
    "firstDifferentSlashIndex",
    "otherString",
    "maxCommonLength",
    "Math",
    "min",
    "char",
    "otherChar",
    "urlToRelativeUrl",
    "urlArg",
    "baseUrlArg",
    "URL",
    "protocol",
    "username",
    "password",
    "host",
    "hash",
    "search",
    "commonPathname",
    "specificPathname",
    "baseSpecificPathname",
    "includes",
    "baseSpecificParentPathname",
    "relativeDirectoriesNotation",
    "replace",
    "moveImportMap",
    "fromUrl",
    "toUrl",
    "makeRelativeTo",
    "relativeUrl",
    "importMapRelative",
    "makeMappingsRelativeTo",
    "makeScopesRelativeTo",
    "mappingsTransformed",
    "mappingsRemaining",
    "transformed",
    "specifierRelative",
    "addressRelative",
    "scopesTransformed",
    "scopesRemaining",
    "scopeSpecifierRelative",
    "scopeMappingsRelative",
    "sortImportMap",
    "sortImports",
    "sortScopes",
    "mappingsSorted",
    "sort",
    "compareLengthOrLocaleCompare",
    "name",
    "scopesSorted",
    "a",
    "b",
    "localeCompare",
    "normalizeImportMap",
    "isStringOrUrl",
    "formulateBaseUrlMustBeStringOrUrl",
    "normalizeMappings",
    "normalizeScopes",
    "mappingsNormalized",
    "console",
    "warn",
    "formulateAddressMustBeAString",
    "specifierResolved",
    "formulateAdressResolutionFailed",
    "endsWith",
    "formulateAddressUrlRequiresTrailingSlash",
    "scopesNormalized",
    "scopeUrl",
    "formulateScopeResolutionFailed",
    "scopeValueNormalized",
    "addressURL",
    "pathnameToExtension",
    "dotLastIndex",
    "resolveImport",
    "defaultExtension",
    "applyDefaultExtension",
    "extension",
    "importerPathname",
    "importerExtension"
  ],
  "mappings": "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"
}