{
  "version": 3,
  "file": "main.cjs",
  "sources": [
    "../../src/internal/assertImportMap.js",
    "../../src/internal/hasScheme.js",
    "../../src/internal/urlToScheme.js",
    "../../src/internal/urlToPathname.js",
    "../../src/internal/urlToOrigin.js",
    "../../src/internal/pathnameToParentPathname.js",
    "../../src/resolveUrl.js",
    "../../src/internal/tryUrlResolution.js",
    "../../src/resolveSpecifier.js",
    "../../src/applyImportMap.js",
    "../../src/composeTwoImportMaps.js",
    "../../src/internal/getCommonPathname.js",
    "../../src/internal/urlToRelativeUrl.js",
    "../../src/moveImportMap.js",
    "../../src/sortImportMap.js",
    "../../src/normalizeImportMap.js",
    "../../src/internal/pathnameToExtension.js",
    "../../src/resolveImport.js"
  ],
  "sourcesContent": [
    "export const assertImportMap = (value) => {\n  if (value === null) {\n    throw new TypeError(`an importMap must be an object, got null`)\n  }\n\n  const type = typeof value\n  if (type !== \"object\") {\n    throw new TypeError(`an importMap must be an object, received ${value}`)\n  }\n\n  if (Array.isArray(value)) {\n    throw new TypeError(`an importMap must be an object, received array ${value}`)\n  }\n}\n",
    "export const hasScheme = (string) => {\n  return /^[a-zA-Z]{2,}:/.test(string)\n}\n",
    "export const urlToScheme = (urlString) => {\n  const colonIndex = urlString.indexOf(\":\")\n  if (colonIndex === -1) return \"\"\n  return urlString.slice(0, colonIndex)\n}\n",
    "import { urlToScheme } from \"./urlToScheme.js\"\n\nexport const urlToPathname = (urlString) => {\n  return ressourceToPathname(urlToRessource(urlString))\n}\n\nconst urlToRessource = (urlString) => {\n  const scheme = urlToScheme(urlString)\n\n  if (scheme === \"file\") {\n    return urlString.slice(\"file://\".length)\n  }\n\n  if (scheme === \"https\" || scheme === \"http\") {\n    // remove origin\n    const afterProtocol = urlString.slice(scheme.length + \"://\".length)\n    const pathnameSlashIndex = afterProtocol.indexOf(\"/\", \"://\".length)\n    return afterProtocol.slice(pathnameSlashIndex)\n  }\n\n  return urlString.slice(scheme.length + 1)\n}\n\nconst ressourceToPathname = (ressource) => {\n  const searchSeparatorIndex = ressource.indexOf(\"?\")\n  return searchSeparatorIndex === -1 ? ressource : ressource.slice(0, searchSeparatorIndex)\n}\n",
    "import { urlToScheme } from \"./urlToScheme.js\"\n\nexport const urlToOrigin = (urlString) => {\n  const scheme = urlToScheme(urlString)\n\n  if (scheme === \"file\") {\n    return \"file://\"\n  }\n\n  if (scheme === \"http\" || scheme === \"https\") {\n    const secondProtocolSlashIndex = scheme.length + \"://\".length\n    const pathnameSlashIndex = urlString.indexOf(\"/\", secondProtocolSlashIndex)\n\n    if (pathnameSlashIndex === -1) return urlString\n    return urlString.slice(0, pathnameSlashIndex)\n  }\n\n  return urlString.slice(0, scheme.length + 1)\n}\n",
    "export const pathnameToParentPathname = (pathname) => {\n  const slashLastIndex = pathname.lastIndexOf(\"/\")\n  if (slashLastIndex === -1) {\n    return \"/\"\n  }\n\n  return pathname.slice(0, slashLastIndex + 1)\n}\n",
    "// could be useful: https://url.spec.whatwg.org/#url-miscellaneous\n\nimport { urlToScheme } from \"./internal/urlToScheme.js\"\nimport { urlToPathname } from \"./internal/urlToPathname.js\"\nimport { urlToOrigin } from \"./internal/urlToOrigin.js\"\nimport { pathnameToParentPathname } from \"./internal/pathnameToParentPathname.js\"\nimport { hasScheme } from \"./internal/hasScheme.js\"\n\nexport const resolveUrl = (specifier, baseUrl) => {\n  if (baseUrl) {\n    if (typeof baseUrl !== \"string\") {\n      throw new TypeError(writeBaseUrlMustBeAString({ baseUrl, specifier }))\n    }\n    if (!hasScheme(baseUrl)) {\n      throw new Error(writeBaseUrlMustBeAbsolute({ baseUrl, specifier }))\n    }\n  }\n\n  if (hasScheme(specifier)) {\n    return specifier\n  }\n\n  if (!baseUrl) {\n    throw new Error(writeBaseUrlRequired({ baseUrl, specifier }))\n  }\n\n  // scheme relative\n  if (specifier.slice(0, 2) === \"//\") {\n    return `${urlToScheme(baseUrl)}:${specifier}`\n  }\n\n  // origin relative\n  if (specifier[0] === \"/\") {\n    return `${urlToOrigin(baseUrl)}${specifier}`\n  }\n\n  const baseOrigin = urlToOrigin(baseUrl)\n  const basePathname = urlToPathname(baseUrl)\n\n  if (specifier === \".\") {\n    const baseDirectoryPathname = pathnameToParentPathname(basePathname)\n    return `${baseOrigin}${baseDirectoryPathname}`\n  }\n\n  // pathname relative inside\n  if (specifier.slice(0, 2) === \"./\") {\n    const baseDirectoryPathname = pathnameToParentPathname(basePathname)\n    return `${baseOrigin}${baseDirectoryPathname}${specifier.slice(2)}`\n  }\n\n  // pathname relative outside\n  if (specifier.slice(0, 3) === \"../\") {\n    let unresolvedPathname = specifier\n    const importerFolders = basePathname.split(\"/\")\n    importerFolders.pop()\n\n    while (unresolvedPathname.slice(0, 3) === \"../\") {\n      unresolvedPathname = unresolvedPathname.slice(3)\n      // when there is no folder left to resolved\n      // we just ignore '../'\n      if (importerFolders.length) {\n        importerFolders.pop()\n      }\n    }\n\n    const resolvedPathname = `${importerFolders.join(\"/\")}/${unresolvedPathname}`\n    return `${baseOrigin}${resolvedPathname}`\n  }\n\n  // bare\n  if (basePathname === \"\") {\n    return `${baseOrigin}/${specifier}`\n  }\n  if (basePathname[basePathname.length] === \"/\") {\n    return `${baseOrigin}${basePathname}${specifier}`\n  }\n  return `${baseOrigin}${pathnameToParentPathname(basePathname)}${specifier}`\n}\n\nconst writeBaseUrlMustBeAString = ({ baseUrl, specifier }) => `baseUrl must be a string.\n--- base url ---\n${baseUrl}\n--- specifier ---\n${specifier}`\n\nconst writeBaseUrlMustBeAbsolute = ({ baseUrl, specifier }) => `baseUrl must be absolute.\n--- base url ---\n${baseUrl}\n--- specifier ---\n${specifier}`\n\nconst writeBaseUrlRequired = ({\n  baseUrl,\n  specifier,\n}) => `baseUrl required to resolve relative specifier.\n--- base url ---\n${baseUrl}\n--- specifier ---\n${specifier}`\n",
    "import { hasScheme } from \"./hasScheme.js\"\nimport { resolveUrl } from \"../resolveUrl.js\"\n\nexport const tryUrlResolution = (string, url) => {\n  const result = resolveUrl(string, url)\n  return hasScheme(result) ? result : null\n}\n",
    "import { hasScheme } from \"./internal/hasScheme.js\"\nimport { resolveUrl } from \"./resolveUrl.js\"\n\nexport const resolveSpecifier = (specifier, importer) => {\n  if (\n    specifier === \".\" ||\n    specifier[0] === \"/\" ||\n    specifier.startsWith(\"./\") ||\n    specifier.startsWith(\"../\")\n  ) {\n    return resolveUrl(specifier, importer)\n  }\n\n  if (hasScheme(specifier)) {\n    return specifier\n  }\n\n  return null\n}\n",
    "import { createDetailedMessage } from \"@jsenv/logger\"\nimport { assertImportMap } from \"./internal/assertImportMap.js\"\nimport { hasScheme } from \"./internal/hasScheme.js\"\nimport { tryUrlResolution } from \"./internal/tryUrlResolution.js\"\nimport { resolveSpecifier } from \"./resolveSpecifier.js\"\n\nexport const applyImportMap = ({\n  importMap,\n  specifier,\n  importer,\n  createBareSpecifierError = ({ specifier, importer }) => {\n    return new Error(createDetailedMessage(`Unmapped bare specifier.`, { specifier, importer }))\n  },\n}) => {\n  assertImportMap(importMap)\n  if (typeof specifier !== \"string\") {\n    throw new TypeError(\n      createDetailedMessage(\"specifier must be a string.\", {\n        specifier,\n        importer,\n      }),\n    )\n  }\n  if (importer) {\n    if (typeof importer !== \"string\") {\n      throw new TypeError(\n        createDetailedMessage(\"importer must be a string.\", {\n          importer,\n          specifier,\n        }),\n      )\n    }\n    if (!hasScheme(importer)) {\n      throw new Error(\n        createDetailedMessage(`importer must be an absolute url.`, {\n          importer,\n          specifier,\n        }),\n      )\n    }\n  }\n\n  const specifierUrl = resolveSpecifier(specifier, importer)\n  const specifierNormalized = specifierUrl || specifier\n\n  const { scopes } = importMap\n  if (scopes && importer) {\n    const scopeKeyMatching = Object.keys(scopes).find((scopeKey) => {\n      return scopeKey === importer || specifierIsPrefixOf(scopeKey, importer)\n    })\n    if (scopeKeyMatching) {\n      const scopeValue = scopes[scopeKeyMatching]\n      const remappingFromScopeImports = applyImports(specifierNormalized, scopeValue)\n      if (remappingFromScopeImports !== null) {\n        return remappingFromScopeImports\n      }\n    }\n  }\n\n  const { imports } = importMap\n  if (imports) {\n    const remappingFromImports = applyImports(specifierNormalized, imports)\n    if (remappingFromImports !== null) {\n      return remappingFromImports\n    }\n  }\n\n  if (specifierUrl) {\n    return specifierUrl\n  }\n\n  throw new Error(createBareSpecifierError({ specifier, importer }))\n}\n\nconst applyImports = (specifier, imports) => {\n  const importKeyArray = Object.keys(imports)\n\n  let i = 0\n  while (i < importKeyArray.length) {\n    const importKey = importKeyArray[i]\n    i++\n    if (importKey === specifier) {\n      const importValue = imports[importKey]\n      return importValue\n    }\n    if (specifierIsPrefixOf(importKey, specifier)) {\n      const importValue = imports[importKey]\n      const afterImportKey = specifier.slice(importKey.length)\n\n      return tryUrlResolution(afterImportKey, importValue)\n    }\n  }\n\n  return null\n}\n\nconst specifierIsPrefixOf = (specifierHref, href) => {\n  return specifierHref[specifierHref.length - 1] === \"/\" && href.startsWith(specifierHref)\n}\n",
    "// https://github.com/systemjs/systemjs/blob/89391f92dfeac33919b0223bbf834a1f4eea5750/src/common.js#L136\nimport { assertImportMap } from \"./internal/assertImportMap.js\"\nimport { resolveUrl } from \"./resolveUrl.js\"\n\nexport const composeTwoImportMaps = (leftImportMap, rightImportMap) => {\n  assertImportMap(leftImportMap)\n  assertImportMap(rightImportMap)\n\n  const importMap = {}\n\n  const leftImports = leftImportMap.imports\n  const rightImports = rightImportMap.imports\n  const leftHasImports = Boolean(leftImports)\n  const rightHasImports = Boolean(rightImports)\n  if (leftHasImports && rightHasImports) {\n    importMap.imports = composeTwoImports(leftImports, rightImports)\n  } else if (leftHasImports) {\n    importMap.imports = { ...leftImports }\n  } else if (rightHasImports) {\n    importMap.imports = { ...rightImports }\n  }\n\n  const leftScopes = leftImportMap.scopes\n  const rightScopes = rightImportMap.scopes\n  const leftHasScopes = Boolean(leftScopes)\n  const rightHasScopes = Boolean(rightScopes)\n  if (leftHasScopes && rightHasScopes) {\n    importMap.scopes = composeTwoScopes(leftScopes, rightScopes, importMap.imports || {})\n  } else if (leftHasScopes) {\n    importMap.scopes = { ...leftScopes }\n  } else if (rightHasScopes) {\n    importMap.scopes = { ...rightScopes }\n  }\n\n  return importMap\n}\n\nconst composeTwoImports = (leftImports, rightImports) => {\n  const topLevelMappings = {}\n  Object.keys(leftImports).forEach((leftSpecifier) => {\n    if (objectHasKey(rightImports, leftSpecifier)) {\n      // will be overidden\n      return\n    }\n    const leftAddress = leftImports[leftSpecifier]\n    const rightSpecifier = Object.keys(rightImports).find((rightSpecifier) => {\n      return compareAddressAndSpecifier(leftAddress, rightSpecifier)\n    })\n    topLevelMappings[leftSpecifier] = rightSpecifier ? rightImports[rightSpecifier] : leftAddress\n  })\n\n  Object.keys(rightImports).forEach((rightSpecifier) => {\n    topLevelMappings[rightSpecifier] = rightImports[rightSpecifier]\n  })\n\n  return topLevelMappings\n}\n\nconst objectHasKey = (object, key) => Object.prototype.hasOwnProperty.call(object, key)\n\nconst compareAddressAndSpecifier = (address, specifier) => {\n  const addressUrl = resolveUrl(address, \"file:///\")\n  const specifierUrl = resolveUrl(specifier, \"file:///\")\n  return addressUrl === specifierUrl\n}\n\nconst composeTwoScopes = (leftScopes, rightScopes, topLevelRemappings) => {\n  const scopedRemappings = {}\n  Object.keys(leftScopes).forEach((leftScopeKey) => {\n    if (objectHasKey(rightScopes, leftScopeKey)) {\n      // will be merged\n      scopedRemappings[leftScopeKey] = leftScopes[leftScopeKey]\n      return\n    }\n    const topLevelSpecifier = Object.keys(topLevelRemappings).find((topLevelSpecifierCandidate) => {\n      return compareAddressAndSpecifier(leftScopeKey, topLevelSpecifierCandidate)\n    })\n    if (topLevelSpecifier) {\n      scopedRemappings[topLevelRemappings[topLevelSpecifier]] = leftScopes[leftScopeKey]\n    } else {\n      scopedRemappings[leftScopeKey] = leftScopes[leftScopeKey]\n    }\n  })\n\n  Object.keys(rightScopes).forEach((rightScopeKey) => {\n    if (objectHasKey(scopedRemappings, rightScopeKey)) {\n      scopedRemappings[rightScopeKey] = composeTwoImports(\n        scopedRemappings[rightScopeKey],\n        rightScopes[rightScopeKey],\n      )\n    } else {\n      scopedRemappings[rightScopeKey] = {\n        ...rightScopes[rightScopeKey],\n      }\n    }\n  })\n  return scopedRemappings\n}\n",
    "export const getCommonPathname = (pathname, otherPathname) => {\n  const firstDifferentCharacterIndex = findFirstDifferentCharacterIndex(pathname, otherPathname)\n\n  // pathname and otherpathname are exactly the same\n  if (firstDifferentCharacterIndex === -1) {\n    return pathname\n  }\n\n  const commonString = pathname.slice(0, firstDifferentCharacterIndex + 1)\n\n  // the first different char is at firstDifferentCharacterIndex\n  if (pathname.charAt(firstDifferentCharacterIndex) === \"/\") {\n    return commonString\n  }\n\n  if (otherPathname.charAt(firstDifferentCharacterIndex) === \"/\") {\n    return commonString\n  }\n\n  const firstDifferentSlashIndex = commonString.lastIndexOf(\"/\")\n  return pathname.slice(0, firstDifferentSlashIndex + 1)\n}\n\nconst findFirstDifferentCharacterIndex = (string, otherString) => {\n  const maxCommonLength = Math.min(string.length, otherString.length)\n  let i = 0\n  while (i < maxCommonLength) {\n    const char = string.charAt(i)\n    const otherChar = otherString.charAt(i)\n    if (char !== otherChar) {\n      return i\n    }\n    i++\n  }\n  if (string.length === otherString.length) {\n    return -1\n  }\n  // they differ at maxCommonLength\n  return maxCommonLength\n}\n",
    "import { getCommonPathname } from \"./getCommonPathname.js\"\nimport { pathnameToParentPathname } from \"./pathnameToParentPathname.js\"\n\nexport const urlToRelativeUrl = (urlArg, baseUrlArg) => {\n  const url = new URL(urlArg)\n  const baseUrl = new URL(baseUrlArg)\n\n  if (url.protocol !== baseUrl.protocol) {\n    return urlArg\n  }\n\n  if (url.username !== baseUrl.username || url.password !== baseUrl.password) {\n    return urlArg.slice(url.protocol.length)\n  }\n\n  if (url.host !== baseUrl.host) {\n    return urlArg.slice(url.protocol.length)\n  }\n\n  const { pathname, hash, search } = url\n  if (pathname === \"/\") {\n    return baseUrl.pathname.slice(1)\n  }\n\n  const { pathname: basePathname } = baseUrl\n\n  const commonPathname = getCommonPathname(pathname, basePathname)\n  if (!commonPathname) {\n    return urlArg\n  }\n\n  const specificPathname = pathname.slice(commonPathname.length)\n  const baseSpecificPathname = basePathname.slice(commonPathname.length)\n  if (baseSpecificPathname.includes(\"/\")) {\n    const baseSpecificParentPathname = pathnameToParentPathname(baseSpecificPathname)\n    const relativeDirectoriesNotation = baseSpecificParentPathname.replace(/.*?\\//g, \"../\")\n    return `${relativeDirectoriesNotation}${specificPathname}${search}${hash}`\n  }\n  return `${specificPathname}${search}${hash}`\n}\n",
    "import { assertImportMap } from \"./internal/assertImportMap.js\"\nimport { urlToRelativeUrl } from \"./internal/urlToRelativeUrl.js\"\nimport { resolveUrl } from \"./resolveUrl.js\"\nimport { resolveSpecifier } from \"./resolveSpecifier.js\"\nimport { hasScheme } from \"./internal/hasScheme.js\"\n\nexport const moveImportMap = (importMap, fromUrl, toUrl) => {\n  assertImportMap(importMap)\n\n  const makeRelativeTo = (value, type) => {\n    let url\n    if (type === \"specifier\") {\n      url = resolveSpecifier(value, fromUrl)\n      if (!url) {\n        // bare specifier\n        return value\n      }\n    } else {\n      url = resolveUrl(value, fromUrl)\n    }\n\n    const relativeUrl = urlToRelativeUrl(url, toUrl)\n    if (relativeUrl.startsWith(\"../\")) {\n      return relativeUrl\n    }\n    if (relativeUrl.startsWith(\"./\")) {\n      return relativeUrl\n    }\n    if (hasScheme(relativeUrl)) {\n      return relativeUrl\n    }\n    return `./${relativeUrl}`\n  }\n\n  const importMapRelative = {}\n  const { imports } = importMap\n  if (imports) {\n    importMapRelative.imports = makeImportsRelativeTo(imports, makeRelativeTo) || imports\n  }\n\n  const { scopes } = importMap\n  if (scopes) {\n    importMapRelative.scopes = makeScopedRemappingRelativeTo(scopes, makeRelativeTo) || scopes\n  }\n\n  // nothing changed\n  if (importMapRelative.imports === imports && importMapRelative.scopes === scopes) {\n    return importMap\n  }\n  return importMapRelative\n}\n\nconst makeScopedRemappingRelativeTo = (scopes, makeRelativeTo) => {\n  const scopesTransformed = {}\n  const scopesRemaining = {}\n  let transformed = false\n  Object.keys(scopes).forEach((scopeKey) => {\n    const scopeValue = scopes[scopeKey]\n    const scopeKeyRelative = makeRelativeTo(scopeKey, \"address\")\n    const scopeValueRelative = makeImportsRelativeTo(scopeValue, makeRelativeTo)\n\n    if (scopeKeyRelative) {\n      transformed = true\n      scopesTransformed[scopeKeyRelative] = scopeValueRelative || scopeValue\n    } else if (scopeValueRelative) {\n      transformed = true\n      scopesTransformed[scopeKey] = scopeValueRelative\n    } else {\n      scopesRemaining[scopeKey] = scopeValueRelative\n    }\n  })\n  return transformed ? { ...scopesTransformed, ...scopesRemaining } : null\n}\n\nconst makeImportsRelativeTo = (imports, makeRelativeTo) => {\n  const importsTransformed = {}\n  const importsRemaining = {}\n  let transformed = false\n  Object.keys(imports).forEach((importKey) => {\n    const importValue = imports[importKey]\n    const importKeyRelative = makeRelativeTo(importKey, \"specifier\")\n    const importValueRelative = makeRelativeTo(importValue, \"address\")\n\n    if (importKeyRelative) {\n      transformed = true\n      importsTransformed[importKeyRelative] = importValueRelative || importValue\n    } else if (importValueRelative) {\n      transformed = true\n      importsTransformed[importKey] = importValueRelative\n    } else {\n      importsRemaining[importKey] = importValue\n    }\n  })\n  return transformed ? { ...importsTransformed, ...importsRemaining } : null\n}\n",
    "import { assertImportMap } from \"./internal/assertImportMap.js\"\n\nexport const sortImportMap = (importMap) => {\n  assertImportMap(importMap)\n\n  const { imports, scopes } = importMap\n\n  return {\n    ...(imports ? { imports: sortImports(imports) } : {}),\n    ...(scopes ? { scopes: sortScopes(scopes) } : {}),\n  }\n}\n\nexport const sortImports = (imports) => {\n  const importsSorted = {}\n  Object.keys(imports)\n    .sort(compareLengthOrLocaleCompare)\n    .forEach((name) => {\n      importsSorted[name] = imports[name]\n    })\n  return importsSorted\n}\n\nexport const sortScopes = (scopes) => {\n  const scopesSorted = {}\n  Object.keys(scopes)\n    .sort(compareLengthOrLocaleCompare)\n    .forEach((scopeName) => {\n      scopesSorted[scopeName] = sortImports(scopes[scopeName])\n    })\n  return scopesSorted\n}\n\nconst compareLengthOrLocaleCompare = (a, b) => {\n  return b.length - a.length || a.localeCompare(b)\n}\n",
    "import { assertImportMap } from \"./internal/assertImportMap.js\"\nimport { tryUrlResolution } from \"./internal/tryUrlResolution.js\"\nimport { resolveSpecifier } from \"./resolveSpecifier.js\"\nimport { sortImports, sortScopes } from \"./sortImportMap.js\"\n\nexport const normalizeImportMap = (importMap, baseUrl) => {\n  assertImportMap(importMap)\n  if (typeof baseUrl !== \"string\") {\n    throw new TypeError(formulateBaseUrlMustBeAString({ baseUrl }))\n  }\n\n  const { imports, scopes } = importMap\n\n  return {\n    imports: imports ? normalizeImports(imports, baseUrl) : undefined,\n    scopes: scopes ? normalizeScopes(scopes, baseUrl) : undefined,\n  }\n}\n\nconst normalizeImports = (imports, baseUrl) => {\n  const importsNormalized = {}\n  Object.keys(imports).forEach((specifier) => {\n    const address = imports[specifier]\n\n    if (typeof address !== \"string\") {\n      console.warn(\n        formulateAddressMustBeAString({\n          address,\n          specifier,\n        }),\n      )\n      return\n    }\n\n    const specifierResolved = resolveSpecifier(specifier, baseUrl) || specifier\n\n    const addressUrl = tryUrlResolution(address, baseUrl)\n    if (addressUrl === null) {\n      console.warn(\n        formulateAdressResolutionFailed({\n          address,\n          baseUrl,\n          specifier,\n        }),\n      )\n      return\n    }\n\n    if (specifier.endsWith(\"/\") && !addressUrl.endsWith(\"/\")) {\n      console.warn(\n        formulateAddressUrlRequiresTrailingSlash({\n          addressUrl,\n          address,\n          specifier,\n        }),\n      )\n      return\n    }\n    importsNormalized[specifierResolved] = addressUrl\n  })\n  return sortImports(importsNormalized)\n}\n\nconst normalizeScopes = (scopes, baseUrl) => {\n  const scopesNormalized = {}\n  Object.keys(scopes).forEach((scope) => {\n    const scopeValue = scopes[scope]\n    const scopeUrl = tryUrlResolution(scope, baseUrl)\n    if (scopeUrl === null) {\n      console.warn(\n        formulateScopeResolutionFailed({\n          scope,\n          baseUrl,\n        }),\n      )\n      return\n    }\n    const scopeValueNormalized = normalizeImports(scopeValue, baseUrl)\n    scopesNormalized[scopeUrl] = scopeValueNormalized\n  })\n  return sortScopes(scopesNormalized)\n}\n\nconst formulateBaseUrlMustBeAString = ({ baseUrl }) => `baseUrl must be a string.\n--- base url ---\n${baseUrl}`\n\nconst formulateAddressMustBeAString = ({ specifier, address }) => `Address must be a string.\n--- address ---\n${address}\n--- specifier ---\n${specifier}`\n\nconst formulateAdressResolutionFailed = ({\n  address,\n  baseUrl,\n  specifier,\n}) => `Address url resolution failed.\n--- address ---\n${address}\n--- base url ---\n${baseUrl}\n--- specifier ---\n${specifier}`\n\nconst formulateAddressUrlRequiresTrailingSlash = ({\n  addressURL,\n  address,\n  specifier,\n}) => `Address must end with /.\n--- address url ---\n${addressURL}\n--- address ---\n${address}\n--- specifier ---\n${specifier}`\n\nconst formulateScopeResolutionFailed = ({ scope, baseUrl }) => `Scope url resolution failed.\n--- scope ---\n${scope}\n--- base url ---\n${baseUrl}`\n",
    "export const pathnameToExtension = (pathname) => {\n  const slashLastIndex = pathname.lastIndexOf(\"/\")\n  if (slashLastIndex !== -1) {\n    pathname = pathname.slice(slashLastIndex + 1)\n  }\n\n  const dotLastIndex = pathname.lastIndexOf(\".\")\n  if (dotLastIndex === -1) return \"\"\n  // if (dotLastIndex === pathname.length - 1) return \"\"\n  return pathname.slice(dotLastIndex)\n}\n",
    "import { urlToPathname } from \"./internal/urlToPathname.js\"\nimport { pathnameToExtension } from \"./internal/pathnameToExtension.js\"\nimport { resolveUrl } from \"./resolveUrl.js\"\nimport { applyImportMap } from \"./applyImportMap.js\"\n\nexport const resolveImport = ({\n  specifier,\n  importer,\n  importMap,\n  defaultExtension = true,\n  createBareSpecifierError,\n}) => {\n  return applyDefaultExtension({\n    url: importMap\n      ? applyImportMap({ importMap, specifier, importer, createBareSpecifierError })\n      : resolveUrl(specifier, importer),\n    importer,\n    defaultExtension,\n  })\n}\n\nconst applyDefaultExtension = ({ url, importer, defaultExtension }) => {\n  if (urlToPathname(url).endsWith(\"/\")) {\n    return url\n  }\n\n  if (typeof defaultExtension === \"string\") {\n    const extension = pathnameToExtension(url)\n    if (extension === \"\") {\n      return `${url}${defaultExtension}`\n    }\n    return url\n  }\n\n  if (defaultExtension === true) {\n    const extension = pathnameToExtension(url)\n    if (extension === \"\" && importer) {\n      const importerPathname = urlToPathname(importer)\n      const importerExtension = pathnameToExtension(importerPathname)\n      return `${url}${importerExtension}`\n    }\n  }\n  return url\n}\n"
  ],
  "names": [
    "assertImportMap",
    "value",
    "TypeError",
    "type",
    "Array",
    "isArray",
    "hasScheme",
    "string",
    "test",
    "urlToScheme",
    "urlString",
    "colonIndex",
    "indexOf",
    "slice",
    "urlToPathname",
    "ressourceToPathname",
    "urlToRessource",
    "scheme",
    "length",
    "afterProtocol",
    "pathnameSlashIndex",
    "ressource",
    "searchSeparatorIndex",
    "urlToOrigin",
    "secondProtocolSlashIndex",
    "pathnameToParentPathname",
    "pathname",
    "slashLastIndex",
    "lastIndexOf",
    "resolveUrl",
    "specifier",
    "baseUrl",
    "writeBaseUrlMustBeAString",
    "Error",
    "writeBaseUrlMustBeAbsolute",
    "writeBaseUrlRequired",
    "baseOrigin",
    "basePathname",
    "baseDirectoryPathname",
    "unresolvedPathname",
    "importerFolders",
    "split",
    "pop",
    "resolvedPathname",
    "join",
    "tryUrlResolution",
    "url",
    "result",
    "resolveSpecifier",
    "importer",
    "startsWith",
    "applyImportMap",
    "importMap",
    "createBareSpecifierError",
    "createDetailedMessage",
    "specifierUrl",
    "specifierNormalized",
    "scopes",
    "scopeKeyMatching",
    "Object",
    "keys",
    "find",
    "scopeKey",
    "specifierIsPrefixOf",
    "scopeValue",
    "remappingFromScopeImports",
    "applyImports",
    "imports",
    "remappingFromImports",
    "importKeyArray",
    "i",
    "importKey",
    "importValue",
    "afterImportKey",
    "specifierHref",
    "href",
    "composeTwoImportMaps",
    "leftImportMap",
    "rightImportMap",
    "leftImports",
    "rightImports",
    "leftHasImports",
    "Boolean",
    "rightHasImports",
    "composeTwoImports",
    "leftScopes",
    "rightScopes",
    "leftHasScopes",
    "rightHasScopes",
    "composeTwoScopes",
    "topLevelMappings",
    "forEach",
    "leftSpecifier",
    "objectHasKey",
    "leftAddress",
    "rightSpecifier",
    "compareAddressAndSpecifier",
    "object",
    "key",
    "prototype",
    "hasOwnProperty",
    "call",
    "address",
    "addressUrl",
    "topLevelRemappings",
    "scopedRemappings",
    "leftScopeKey",
    "topLevelSpecifier",
    "topLevelSpecifierCandidate",
    "rightScopeKey",
    "getCommonPathname",
    "otherPathname",
    "firstDifferentCharacterIndex",
    "findFirstDifferentCharacterIndex",
    "commonString",
    "charAt",
    "firstDifferentSlashIndex",
    "otherString",
    "maxCommonLength",
    "Math",
    "min",
    "char",
    "otherChar",
    "urlToRelativeUrl",
    "urlArg",
    "baseUrlArg",
    "URL",
    "protocol",
    "username",
    "password",
    "host",
    "hash",
    "search",
    "commonPathname",
    "specificPathname",
    "baseSpecificPathname",
    "includes",
    "baseSpecificParentPathname",
    "relativeDirectoriesNotation",
    "replace",
    "moveImportMap",
    "fromUrl",
    "toUrl",
    "makeRelativeTo",
    "relativeUrl",
    "importMapRelative",
    "makeImportsRelativeTo",
    "makeScopedRemappingRelativeTo",
    "scopesTransformed",
    "scopesRemaining",
    "transformed",
    "scopeKeyRelative",
    "scopeValueRelative",
    "importsTransformed",
    "importsRemaining",
    "importKeyRelative",
    "importValueRelative",
    "sortImportMap",
    "sortImports",
    "sortScopes",
    "importsSorted",
    "sort",
    "compareLengthOrLocaleCompare",
    "name",
    "scopesSorted",
    "scopeName",
    "a",
    "b",
    "localeCompare",
    "normalizeImportMap",
    "formulateBaseUrlMustBeAString",
    "normalizeImports",
    "undefined",
    "normalizeScopes",
    "importsNormalized",
    "console",
    "warn",
    "formulateAddressMustBeAString",
    "specifierResolved",
    "formulateAdressResolutionFailed",
    "endsWith",
    "formulateAddressUrlRequiresTrailingSlash",
    "scopesNormalized",
    "scope",
    "scopeUrl",
    "formulateScopeResolutionFailed",
    "scopeValueNormalized",
    "addressURL",
    "pathnameToExtension",
    "dotLastIndex",
    "resolveImport",
    "defaultExtension",
    "applyDefaultExtension",
    "extension",
    "importerPathname",
    "importerExtension"
  ],
  "mappings": "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"
}