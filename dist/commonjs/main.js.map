{"version":3,"file":"main.js","sources":["/src/assertImportMap.js","/src/hasScheme.js","/node_modules/@jsenv/href/src/hrefToScheme/hrefToScheme.js","/node_modules/@jsenv/href/src/hrefToPathname/hrefToPathname.js","/node_modules/@jsenv/href/src/hrefToOrigin/hrefToOrigin.js","/node_modules/@jsenv/href/src/pathnameToDirname/pathnameToDirname.js","/src/resolveUrl/resolveUrl.js","/src/tryUrlResolution.js","/src/resolveSpecifier/resolveSpecifier.js","/src/applyImportMap/applyImportMap.js","/src/composeTwoImportMaps/composeTwoImportMaps.js","/src/sortImportMap/sortImportMap.js","/src/normalizeImportMap/normalizeImportMap.js","/src/normalizeImportMapForProject/normalizeImportMapForProject.js","/node_modules/@jsenv/href/src/pathnameToExtension/pathnameToExtension.js","/src/resolveImport/resolveImport.js","/node_modules/@jsenv/operating-system-path/src/starts-with-windows-drive-letter.js","/node_modules/@jsenv/operating-system-path/src/is-windows-path.js","/node_modules/@jsenv/operating-system-path/src/replace-back-slashes-with-slashes.js","/node_modules/@jsenv/operating-system-path/src/operatingSystemPathToPathname.js","/node_modules/@jsenv/href/src/pathnameToRelativePath/pathnameToRelativePath.js","/src/resolveImportForProject/escapeRegexpSpecialCharacters.js","/src/resolveImportForProject/resolveImportForProject.js","/src/resolveSpecifierForProject/resolveSpecifierForProject.js","/src/wrapImportMap/wrapImportMap.js"],"sourcesContent":["export const assertImportMap = (value) => {\n  if (value === null) {\n    throw new TypeError(`an importMap must be an object, got null`)\n  }\n\n  const type = typeof value\n  if (type !== \"object\") {\n    throw new TypeError(`an importMap must be an object, received ${value}`)\n  }\n\n  if (Array.isArray(value)) {\n    throw new TypeError(`an importMap must be an object, received array ${value}`)\n  }\n}\n","export const hasScheme = (string) => {\n  return /^[a-zA-Z]{2,}:/.test(string)\n}\n","export const hrefToScheme = (href) => {\n  const colonIndex = href.indexOf(\":\")\n  if (colonIndex === -1) return \"\"\n  return href.slice(0, colonIndex)\n}\n","import { hrefToScheme } from \"../hrefToScheme/hrefToScheme.js\"\n\nexport const hrefToPathname = (href) => {\n  return ressourceToPathname(hrefToRessource(href))\n}\n\nconst hrefToRessource = (href) => {\n  const scheme = hrefToScheme(href)\n\n  if (scheme === \"file\") {\n    return href.slice(\"file://\".length)\n  }\n\n  if (scheme === \"https\" || scheme === \"http\") {\n    // remove origin\n    const afterProtocol = href.slice(scheme.length + \"://\".length)\n    const pathnameSlashIndex = afterProtocol.indexOf(\"/\", \"://\".length)\n    return afterProtocol.slice(pathnameSlashIndex)\n  }\n\n  return href.slice(scheme.length + 1)\n}\n\nconst ressourceToPathname = (ressource) => {\n  const searchSeparatorIndex = ressource.indexOf(\"?\")\n  return searchSeparatorIndex === -1 ? ressource : ressource.slice(0, searchSeparatorIndex)\n}\n","import { hrefToScheme } from \"../hrefToScheme/hrefToScheme.js\"\n\nexport const hrefToOrigin = (href) => {\n  const scheme = hrefToScheme(href)\n\n  if (scheme === \"file\") {\n    return \"file://\"\n  }\n\n  if (scheme === \"http\" || scheme === \"https\") {\n    const secondProtocolSlashIndex = scheme.length + \"://\".length\n    const pathnameSlashIndex = href.indexOf(\"/\", secondProtocolSlashIndex)\n\n    if (pathnameSlashIndex === -1) return href\n    return href.slice(0, pathnameSlashIndex)\n  }\n\n  return href.slice(0, scheme.length + 1)\n}\n","export const pathnameToDirname = (pathname) => {\n  const slashLastIndex = pathname.lastIndexOf(\"/\")\n  if (slashLastIndex === -1) return \"\"\n\n  return pathname.slice(0, slashLastIndex)\n}\n","// could be useful: https://url.spec.whatwg.org/#url-miscellaneous\n\nimport { hasScheme } from \"../hasScheme.js\"\nimport { hrefToScheme } from \"@jsenv/href/src/hrefToScheme/hrefToScheme.js\"\nimport { hrefToPathname } from \"@jsenv/href/src/hrefToPathname/hrefToPathname.js\"\nimport { hrefToOrigin } from \"@jsenv/href/src/hrefToOrigin/hrefToOrigin.js\"\nimport { pathnameToDirname } from \"@jsenv/href/src/pathnameToDirname/pathnameToDirname.js\"\n\nexport const resolveUrl = (specifier, baseUrl) => {\n  if (baseUrl) {\n    if (typeof baseUrl !== \"string\") {\n      throw new TypeError(writeBaseUrlMustBeAString({ baseUrl, specifier }))\n    }\n    if (!hasScheme(baseUrl)) {\n      throw new Error(writeBaseUrlMustBeAbsolute({ baseUrl, specifier }))\n    }\n  }\n\n  if (hasScheme(specifier)) {\n    return specifier\n  }\n\n  if (!baseUrl) {\n    throw new Error(writeBaseUrlRequired({ baseUrl, specifier }))\n  }\n\n  // scheme relative\n  if (specifier.slice(0, 2) === \"//\") {\n    return `${hrefToScheme(baseUrl)}:${specifier}`\n  }\n\n  // origin relative\n  if (specifier[0] === \"/\") {\n    return `${hrefToOrigin(baseUrl)}${specifier}`\n  }\n\n  const baseOrigin = hrefToOrigin(baseUrl)\n  const basePathname = hrefToPathname(baseUrl)\n\n  if (specifier === \".\") {\n    const baseDirname = pathnameToDirname(basePathname)\n    return `${baseOrigin}${baseDirname}/`\n  }\n\n  // pathname relative inside\n  if (specifier.slice(0, 2) === \"./\") {\n    const baseDirname = pathnameToDirname(basePathname)\n    return `${baseOrigin}${baseDirname}/${specifier.slice(2)}`\n  }\n\n  // pathname relative outside\n  if (specifier.slice(0, 3) === \"../\") {\n    let unresolvedPathname = specifier\n    const importerFolders = basePathname.split(\"/\")\n    importerFolders.pop()\n\n    while (unresolvedPathname.slice(0, 3) === \"../\") {\n      unresolvedPathname = unresolvedPathname.slice(3)\n      // when there is no folder left to resolved\n      // we just ignore '../'\n      if (importerFolders.length) {\n        importerFolders.pop()\n      }\n    }\n\n    const resolvedPathname = `${importerFolders.join(\"/\")}/${unresolvedPathname}`\n    return `${baseOrigin}${resolvedPathname}`\n  }\n\n  // bare\n  if (basePathname === \"\") {\n    return `${baseOrigin}/${specifier}`\n  }\n  if (basePathname[basePathname.length] === \"/\") {\n    return `${baseOrigin}${basePathname}${specifier}`\n  }\n  return `${baseOrigin}${pathnameToDirname(basePathname)}/${specifier}`\n}\n\nconst writeBaseUrlMustBeAString = ({ baseUrl, specifier }) => `baseUrl must be a string.\n--- base url ---\n${baseUrl}\n--- specifier ---\n${specifier}`\n\nconst writeBaseUrlMustBeAbsolute = ({ baseUrl, specifier }) => `baseUrl must be absolute.\n--- base url ---\n${baseUrl}\n--- specifier ---\n${specifier}`\n\nconst writeBaseUrlRequired = ({\n  baseUrl,\n  specifier,\n}) => `baseUrl required to resolve relative specifier.\n--- base url ---\n${baseUrl}\n--- specifier ---\n${specifier}`\n","import { hasScheme } from \"./hasScheme.js\"\nimport { resolveUrl } from \"./resolveUrl/resolveUrl.js\"\n\nexport const tryUrlResolution = (string, url) => {\n  const result = resolveUrl(string, url)\n  return hasScheme(result) ? result : null\n}\n","import { hasScheme } from \"../hasScheme.js\"\nimport { resolveUrl } from \"../resolveUrl/resolveUrl.js\"\n\nexport const resolveSpecifier = (specifier, importer) => {\n  if (specifier[0] === \"/\" || specifier.startsWith(\"./\") || specifier.startsWith(\"../\")) {\n    return resolveUrl(specifier, importer)\n  }\n\n  if (hasScheme(specifier)) {\n    return specifier\n  }\n\n  return null\n}\n","import { assertImportMap } from \"../assertImportMap.js\"\nimport { hasScheme } from \"../hasScheme.js\"\nimport { tryUrlResolution } from \"../tryUrlResolution.js\"\nimport { resolveSpecifier } from \"../resolveSpecifier/resolveSpecifier.js\"\n\nexport const applyImportMap = ({ importMap, specifier, importer }) => {\n  assertImportMap(importMap)\n  if (typeof specifier !== \"string\") {\n    throw new TypeError(writeSpecifierMustBeAString({ specifier, importer }))\n  }\n  if (importer) {\n    if (typeof importer !== \"string\") {\n      throw new TypeError(writeImporterMustBeAString({ importer, specifier }))\n    }\n    if (!hasScheme(importer)) {\n      throw new Error(writeImporterMustBeAbsolute({ importer, specifier }))\n    }\n  }\n\n  const specifierUrl = resolveSpecifier(specifier, importer)\n  const specifierNormalized = specifierUrl || specifier\n\n  const { scopes } = importMap\n  if (scopes && importer) {\n    const scopeKeyMatching = Object.keys(scopes).find((scopeKey) => {\n      return scopeKey === importer || specifierIsPrefixOf(scopeKey, importer)\n    })\n    if (scopeKeyMatching) {\n      const scopeValue = scopes[scopeKeyMatching]\n      const remappingFromScopeImports = applyImports(specifierNormalized, scopeValue)\n      if (remappingFromScopeImports !== null) {\n        return remappingFromScopeImports\n      }\n    }\n  }\n\n  const { imports } = importMap\n  if (imports) {\n    const remappingFromImports = applyImports(specifierNormalized, imports)\n    if (remappingFromImports !== null) {\n      return remappingFromImports\n    }\n  }\n\n  if (specifierUrl) {\n    return specifierUrl\n  }\n\n  throw new Error(writeBareSpecifierMustBeRemapped({ specifier, importer }))\n}\n\nconst applyImports = (specifier, imports) => {\n  const importKeyArray = Object.keys(imports)\n\n  let i = 0\n  while (i < importKeyArray.length) {\n    const importKey = importKeyArray[i]\n    i++\n    if (importKey === specifier) {\n      const importValue = imports[importKey]\n      return importValue\n    }\n    if (specifierIsPrefixOf(importKey, specifier)) {\n      const importValue = imports[importKey]\n      const afterImportKey = specifier.slice(importKey.length)\n\n      return tryUrlResolution(afterImportKey, importValue)\n    }\n  }\n\n  return null\n}\n\nconst specifierIsPrefixOf = (specifierHref, href) => {\n  return specifierHref[specifierHref.length - 1] === \"/\" && href.startsWith(specifierHref)\n}\n\nconst writeSpecifierMustBeAString = ({ specifier, importer }) => `specifier must be a string.\n--- specifier ---\n${specifier}\n--- importer ---\n${importer}`\n\nconst writeImporterMustBeAString = ({ importer, specifier }) => `importer must be a string.\n--- importer ---\n${importer}\n--- specifier ---\n${specifier}`\n\nconst writeImporterMustBeAbsolute = ({ importer, specifier }) => `importer must be an absolute url.\n--- importer ---\n${importer}\n--- specifier ---\n${specifier}`\n\nconst writeBareSpecifierMustBeRemapped = ({ specifier, importer }) => `Unmapped bare specifier.\n--- specifier ---\n${specifier}\n--- importer ---\n${importer}`\n","// https://github.com/systemjs/systemjs/blob/89391f92dfeac33919b0223bbf834a1f4eea5750/src/common.js#L136\nimport { assertImportMap } from \"../assertImportMap.js\"\n\nexport const composeTwoImportMaps = (leftImportMap, rightImportMap) => {\n  assertImportMap(leftImportMap)\n  assertImportMap(rightImportMap)\n\n  return {\n    imports: composeTwoImports(leftImportMap.imports, rightImportMap.imports),\n    scopes: composeTwoScopes(leftImportMap.scopes, rightImportMap.scopes),\n  }\n}\n\nconst composeTwoImports = (leftImports = {}, rightImports = {}) => {\n  return { ...leftImports, ...rightImports }\n}\n\nconst composeTwoScopes = (leftScopes = {}, rightScopes = {}) => {\n  const scopes = { ...leftScopes }\n  Object.keys(rightScopes).forEach((scopeKey) => {\n    if (scopes.hasOwnProperty(scopeKey)) {\n      scopes[scopeKey] = { ...scopes[scopeKey], ...rightScopes[scopeKey] }\n    } else {\n      scopes[scopeKey] = { ...rightScopes[scopeKey] }\n    }\n  })\n  return scopes\n}\n","import { assertImportMap } from \"../assertImportMap.js\"\n\nexport const sortImportMap = (importMap) => {\n  assertImportMap(importMap)\n\n  const { imports, scopes } = importMap\n  return {\n    imports: imports ? sortImports(imports) : undefined,\n    scopes: scopes ? sortScopes(scopes) : undefined,\n  }\n}\n\nexport const sortImports = (imports) => {\n  const importsSorted = {}\n  Object.keys(imports)\n    .sort(compareLengthOrLocaleCompare)\n    .forEach((name) => {\n      importsSorted[name] = imports[name]\n    })\n  return importsSorted\n}\n\nexport const sortScopes = (scopes) => {\n  const scopesSorted = {}\n  Object.keys(scopes)\n    .sort(compareLengthOrLocaleCompare)\n    .forEach((scopeName) => {\n      scopesSorted[scopeName] = sortImports(scopes[scopeName])\n    })\n  return scopesSorted\n}\n\nconst compareLengthOrLocaleCompare = (a, b) => {\n  return b.length - a.length || a.localeCompare(b)\n}\n","import { assertImportMap } from \"../assertImportMap.js\"\nimport { tryUrlResolution } from \"../tryUrlResolution.js\"\nimport { resolveSpecifier } from \"../resolveSpecifier/resolveSpecifier.js\"\n\nimport { sortImports, sortScopes } from \"../sortImportMap/sortImportMap.js\"\n\nexport const normalizeImportMap = (importMap, baseUrl) => {\n  assertImportMap(importMap)\n  if (typeof baseUrl !== \"string\") {\n    throw new TypeError(formulateBaseUrlMustBeAString({ baseUrl }))\n  }\n\n  const { imports, scopes } = importMap\n\n  return {\n    imports: imports ? normalizeImports(imports, baseUrl) : undefined,\n    scopes: scopes ? normalizeScopes(scopes, baseUrl) : undefined,\n  }\n}\n\nconst normalizeImports = (imports, baseUrl) => {\n  const importsNormalized = {}\n  Object.keys(imports).forEach((specifier) => {\n    const address = imports[specifier]\n\n    if (typeof address !== \"string\") {\n      console.warn(\n        formulateAddressMustBeAString({\n          address,\n          specifier,\n        }),\n      )\n      return\n    }\n\n    const specifierResolved = resolveSpecifier(specifier, baseUrl) || specifier\n\n    const addressUrl = tryUrlResolution(address, baseUrl)\n    if (addressUrl === null) {\n      console.warn(\n        formulateAdressResolutionFailed({\n          address,\n          baseUrl,\n          specifier,\n        }),\n      )\n      return\n    }\n\n    if (specifier.endsWith(\"/\") && !addressUrl.endsWith(\"/\")) {\n      console.warn(\n        formulateAddressUrlRequiresTrailingSlash({\n          addressUrl,\n          address,\n          specifier,\n        }),\n      )\n      return\n    }\n    importsNormalized[specifierResolved] = addressUrl\n  })\n  return sortImports(importsNormalized)\n}\n\nconst normalizeScopes = (scopes, baseUrl) => {\n  const scopesNormalized = {}\n  Object.keys(scopes).forEach((scope) => {\n    const scopeValue = scopes[scope]\n    const scopeUrl = tryUrlResolution(scope, baseUrl)\n    if (scopeUrl === null) {\n      console.warn(\n        formulateScopeResolutionFailed({\n          scope,\n          baseUrl,\n        }),\n      )\n      return\n    }\n    const scopeValueNormalized = normalizeImports(scopeValue, baseUrl)\n    scopesNormalized[scopeUrl] = scopeValueNormalized\n  })\n  return sortScopes(scopesNormalized)\n}\n\nconst formulateBaseUrlMustBeAString = ({ baseUrl }) => `baseUrl must be a string.\n--- base url ---\n${baseUrl}`\n\nconst formulateAddressMustBeAString = ({ specifier, address }) => `Address must be a string.\n--- address ---\n${address}\n--- specifier ---\n${specifier}`\n\nconst formulateAdressResolutionFailed = ({\n  address,\n  baseUrl,\n  specifier,\n}) => `Address url resolution failed.\n--- address ---\n${address}\n--- base url ---\n${baseUrl}\n--- specifier ---\n${specifier}`\n\nconst formulateAddressUrlRequiresTrailingSlash = ({\n  addressURL,\n  address,\n  specifier,\n}) => `Address must end with /.\n--- address url ---\n${addressURL}\n--- address ---\n${address}\n--- specifier ---\n${specifier}`\n\nconst formulateScopeResolutionFailed = ({ scope, baseUrl }) => `Scope url resolution failed.\n--- scope ---\n${scope}\n--- base url ---\n${baseUrl}`\n","import { normalizeImportMap } from \"../normalizeImportMap/normalizeImportMap.js\"\n\nexport const normalizeImportMapForProject = (\n  importMap,\n  httpResolutionOrigin = \"http://fake_origin_unlikely_to_collide.ext\",\n) => {\n  return normalizeImportMap(importMap, httpResolutionOrigin)\n}\n","export const pathnameToExtension = (pathname) => {\n  const slashLastIndex = pathname.lastIndexOf(\"/\")\n  if (slashLastIndex !== -1) {\n    pathname = pathname.slice(slashLastIndex + 1)\n  }\n\n  const dotLastIndex = pathname.lastIndexOf(\".\")\n  if (dotLastIndex === -1) return \"\"\n  // if (dotLastIndex === pathname.length - 1) return \"\"\n  return pathname.slice(dotLastIndex)\n}\n","// directly target the files because this code\n// will be executed either on node or browser\n// and also we don't want to pull more code than necessary\n// when this one gets bundled\nimport { hrefToPathname } from \"@jsenv/href/src/hrefToPathname/hrefToPathname.js\"\nimport { pathnameToExtension } from \"@jsenv/href/src/pathnameToExtension/pathnameToExtension.js\"\nimport { resolveUrl } from \"../resolveUrl/resolveUrl.js\"\nimport { applyImportMap } from \"../applyImportMap/applyImportMap.js\"\n\nexport const resolveImport = ({ specifier, importer, importMap, defaultExtension = true }) => {\n  return applyDefaultExtension({\n    url: importMap\n      ? applyImportMap({ importMap, specifier, importer })\n      : resolveUrl(specifier, importer),\n    importer,\n    defaultExtension,\n  })\n}\n\nconst applyDefaultExtension = ({ url, importer, defaultExtension }) => {\n  if (hrefToPathname(url) === \"/\") {\n    return url\n  }\n\n  if (url.endsWith(\"/\")) {\n    return url\n  }\n\n  if (typeof defaultExtension === \"string\") {\n    const extension = pathnameToExtension(url)\n    if (extension === \"\") {\n      return `${url}${defaultExtension}`\n    }\n    return url\n  }\n\n  if (defaultExtension === true) {\n    const extension = pathnameToExtension(url)\n    if (extension === \"\" && importer) {\n      const importerPathname = hrefToPathname(importer)\n      const importerExtension = pathnameToExtension(importerPathname)\n      return `${url}${importerExtension}`\n    }\n  }\n  return url\n}\n","export const startsWithWindowsDriveLetter = (string) => {\n  const firstChar = string[0]\n  if (!/[a-zA-Z]/.test(firstChar)) return false\n\n  const secondChar = string[1]\n  if (secondChar !== \":\") return false\n\n  return true\n}\n","import { startsWithWindowsDriveLetter } from \"./starts-with-windows-drive-letter.js\"\n\nexport const isWindowsPath = (path) => startsWithWindowsDriveLetter(path) && path[2] === \"\\\\\"\n","export const replaceBackSlashesWithSlashes = (string) => string.replace(/\\\\/g, \"/\")\n","import { isWindowsPath } from \"./is-windows-path.js\"\nimport { replaceBackSlashesWithSlashes } from \"./replace-back-slashes-with-slashes.js\"\n\nexport const operatingSystemPathToPathname = (operatingSystemPath) => {\n  if (typeof operatingSystemPath !== \"string\") {\n    throw new TypeError(`operatingSystemPath must be a string, got ${operatingSystemPath}`)\n  }\n\n  if (operatingSystemPath.startsWith(\"file://\")) {\n    const pathname = operatingSystemPath.slice(\"file://\".length)\n    if (pathname.endsWith(\"/\")) {\n      return pathname.slice(0, -1)\n    }\n    return pathname\n  }\n\n  if (isWindowsPath(operatingSystemPath)) {\n    return `/${replaceBackSlashesWithSlashes(operatingSystemPath)}`\n  }\n\n  // linux and mac operatingSystemFilename === pathname\n  if (operatingSystemPath.endsWith(\"/\")) {\n    return operatingSystemPath.slice(0, -1)\n  }\n  return operatingSystemPath\n}\n","export const pathnameToRelativePath = (pathname, otherPathname) =>\n  pathname.slice(otherPathname.length)\n","// https://github.com/benjamingr/RegExp.escape/blob/master/polyfill.js\n\nexport const escapeRegexpSpecialCharacters = (string) => {\n  string = String(string)\n  let i = 0\n  let escapedString = \"\"\n\n  while (i < string.length) {\n    const char = string[i]\n    i++\n    escapedString += isRegExpSpecialChar(char) ? `\\\\${char}` : char\n  }\n  return escapedString\n}\n\nconst isRegExpSpecialChar = (char) => regexpSpecialChars.indexOf(char) > -1\n\nconst regexpSpecialChars = [\n  \"/\",\n  \"^\",\n  \"\\\\\",\n  \"[\",\n  \"]\",\n  \"(\",\n  \")\",\n  \"{\",\n  \"}\",\n  \"?\",\n  \"+\",\n  \"*\",\n  \".\",\n  \"|\",\n  \"$\",\n]\n","import { operatingSystemPathToPathname } from \"@jsenv/operating-system-path\"\nimport { hrefToOrigin, hrefToPathname, pathnameToRelativePath } from \"@jsenv/href\"\nimport { hasScheme } from \"../hasScheme.js\"\nimport { resolveUrl } from \"../resolveUrl/resolveUrl.js\"\nimport { resolveImport } from \"../resolveImport/resolveImport.js\"\nimport { escapeRegexpSpecialCharacters } from \"./escapeRegexpSpecialCharacters.js\"\n\nexport const resolveImportForProject = ({\n  projectPath,\n  specifier,\n  importer = projectPathname,\n  importMap = {},\n  importDefaultExtension,\n  httpResolutionForcing = true,\n  httpResolutionOrigin = \"http://fake_origin_unlikely_to_collide.ext\",\n  insideProjectForcing = true,\n}) => {\n  if (typeof projectPath !== \"string\") {\n    throw new TypeError(`projectPath must be a string, got ${projectPath}`)\n  }\n\n  if (importer && !hasScheme(importer)) {\n    throw new Error(`importer must have a scheme, got ${importer}`)\n  }\n\n  const projectPathname = operatingSystemPathToPathname(projectPath)\n  const projectHref = `file://${projectPathname}`\n  const importerHref = importer || projectHref\n\n  if (\n    insideProjectForcing &&\n    importer !== projectHref &&\n    hrefUseFileProtocol(importerHref) &&\n    !importerHref.startsWith(`${projectHref}/`)\n  ) {\n    throw new Error(\n      formulateImporterMustBeInsideProject({\n        projectPath,\n        importer,\n      }),\n    )\n  }\n\n  let importerForProject\n  if (httpResolutionForcing) {\n    if (importerHref === projectHref) {\n      importerForProject = `${httpResolutionOrigin}`\n    } else if (importerHref.startsWith(`${projectHref}/`)) {\n      const importerPathname = hrefToPathname(importerHref)\n      const importerRelativePath = pathnameToRelativePath(importerPathname, projectPathname)\n      // 99% of the time importer is an operating system path\n      // here we ensure / is resolved against project by forcing an url resolution\n      // prefixing with origin\n      importerForProject = `${httpResolutionOrigin}${importerRelativePath}`\n    } else {\n      // there is already a scheme (http, https, file), keep it\n      // it means there is an absolute import starting with file:// or http:// for instance.\n      importerForProject = importerHref\n    }\n  } else {\n    importerForProject = importerHref\n  }\n\n  if (hrefUseFileProtocol(importer) && !isOriginRelativeSpecifier(specifier)) {\n    const url = resolveUrl(specifier, importer)\n\n    if (hrefUseFileProtocol(url)) {\n      const isOutsideProject = url !== projectHref && !url.startsWith(`${projectHref}/`)\n\n      if (isOutsideProject) {\n        if (insideProjectForcing) {\n          throw new Error(\n            formulateImportMustBeInsideProject({\n              projectPath,\n              specifier,\n              importer,\n              importUrl: url,\n            }),\n          )\n        }\n\n        return url\n      }\n    }\n  }\n\n  let importUrl\n  try {\n    importUrl = resolveImport({\n      specifier,\n      importer: importerForProject,\n      importMap,\n      defaultExtension: importDefaultExtension,\n    })\n  } catch (e) {\n    const httpResolutionOriginRegExp = new RegExp(\n      escapeRegexpSpecialCharacters(httpResolutionOrigin),\n      \"g\",\n    )\n    const projectOrigin = `file://${projectPathname}`\n    e.stack = e.stack.replace(httpResolutionOriginRegExp, projectOrigin)\n    e.message = e.message.replace(httpResolutionOriginRegExp, projectOrigin)\n    throw e\n  }\n\n  if (\n    insideProjectForcing &&\n    // only if use file protocol because\n    // it's ok to have an external import like \"https://cdn.com/jquery.js\"\n    hrefUseFileProtocol(importUrl) &&\n    importUrl !== projectHref &&\n    !importUrl.startsWith(`${projectHref}/`)\n  ) {\n    throw new Error(\n      formulateImportMustBeInsideProject({\n        projectPath,\n        specifier,\n        importer,\n        importUrl,\n      }),\n    )\n  }\n\n  if (httpResolutionForcing && hrefToOrigin(importUrl) === httpResolutionOrigin) {\n    const importRelativePath = hrefToPathname(importUrl)\n    return `${projectHref}${importRelativePath}`\n  }\n\n  return importUrl\n}\n\nconst isOriginRelativeSpecifier = (specifier) => {\n  return specifier[0] === \"/\" && specifier[1] !== \"/\"\n}\n\nconst hrefUseFileProtocol = (specifier) => specifier.startsWith(\"file://\")\n\nconst formulateImporterMustBeInsideProject = ({\n  projectPath,\n  importer,\n}) => `importer must be inside project.\n--- importer ---\n${importer}\n--- project path ---\n${projectPath}`\n\nconst formulateImportMustBeInsideProject = ({\n  projectPath,\n  specifier,\n  importer,\n  importUrl,\n}) => `import must be inside project.\n--- import url ---\n${importUrl}\n--- project path ---\n${projectPath}\n--- specifier ---\n${specifier}\n--- importer ---\n${importer}`\n","import { hrefToOrigin, hrefToPathname } from \"@jsenv/href\"\nimport { resolveSpecifier } from \"../resolveSpecifier/resolveSpecifier.js\"\n\nexport const resolveSpecifierForProject = (\n  specifier,\n  projectPathname,\n  httpResolutionOrigin = \"http://fake_origin_unlikely_to_collide.ext\",\n) => {\n  const specifierHttpResolved = resolveSpecifier(specifier, httpResolutionOrigin)\n  if (hrefToOrigin(specifierHttpResolved) === httpResolutionOrigin) {\n    const specifierRelativePath = hrefToPathname(specifierHttpResolved)\n    return `file://${projectPathname}${specifierRelativePath}`\n  }\n  return specifierHttpResolved\n}\n","/**\n * wrapImportMap can be used to remap all your imports under a folder.\n *\n * It is used by jsenv to import from a compiled folder instead of source folder.\n *\n * wrapImportMap must preserve the import map order so that\n * applyImportMap can still match the most specific pattern first.\n *\n * Because order is directly connected to the pattern length\n * prefixing every pattern with something does not means we have to sort\n * the wrappedImportMap.\n *\n * However we must absolutely ensure if an import like '/' exists in imports\n * or scoped imports. It must remain the last when being prefixed.\n *\n */\n\nimport { assertImportMap } from \"../assertImportMap.js\"\nimport { hasScheme } from \"../hasScheme.js\"\n\nexport const wrapImportMap = (importMap, folderRelativeName, ensureInto = true) => {\n  assertImportMap(importMap)\n  if (typeof folderRelativeName !== \"string\") {\n    throw new TypeError(formulateFolderRelativeNameMustBeAString({ folderRelativeName }))\n  }\n\n  const into = `/${folderRelativeName}/`\n  const { imports, scopes } = importMap\n\n  let importsForWrapping\n  if (imports) {\n    importsForWrapping = wrapTopLevelImports(imports, into)\n  } else {\n    importsForWrapping = {}\n  }\n\n  let scopesForWrapping\n  if (scopes) {\n    scopesForWrapping = wrapScopes(scopes, into)\n  } else {\n    scopesForWrapping = {}\n  }\n\n  if (ensureInto) {\n    // ensure anything not directly remapped is remapped inside into\n    importsForWrapping[into] = into\n    importsForWrapping[\"/\"] = into\n    // and when already into, you stay inside\n    scopesForWrapping[into] = { [into]: into }\n  }\n\n  return {\n    imports: importsForWrapping,\n    scopes: scopesForWrapping,\n  }\n}\n\nconst wrapScopes = (scopes, into) => {\n  const scopesWrapped = {}\n\n  Object.keys(scopes).forEach((scopeKey) => {\n    const scopeValue = scopes[scopeKey]\n    const scopeKeyWrapped = wrapAddress(scopeKey, into)\n\n    const { importsWrapped, importsRemaining } = wrapImports(scopeValue, into)\n\n    let scopeValueWrapped\n    if (scopeHasLeadingSlashScopedRemapping(scopeValue, scopeKey)) {\n      const leadingSlashSpecifier = `${into}${scopeKey.slice(1)}`\n      scopeValueWrapped = {}\n      // put everything except the leading slash remapping\n      Object.keys(importsWrapped).forEach((importKeyWrapped) => {\n        if (importKeyWrapped === leadingSlashSpecifier || importKeyWrapped === into) {\n          return\n        }\n        scopeValueWrapped[importKeyWrapped] = importsWrapped[importKeyWrapped]\n      })\n      Object.keys(importsRemaining).forEach((importKey) => {\n        if (importKey === scopeKey || importKey === \"/\") {\n          return\n        }\n        scopeValueWrapped[importKey] = importsRemaining[importKey]\n      })\n      // now put leading slash remapping to ensure it comes last\n      scopeValueWrapped[leadingSlashSpecifier] = leadingSlashSpecifier\n      scopeValueWrapped[scopeKey] = leadingSlashSpecifier\n      scopeValueWrapped[into] = leadingSlashSpecifier\n      scopeValueWrapped[\"/\"] = leadingSlashSpecifier\n    } else {\n      scopeValueWrapped = {\n        ...importsWrapped,\n        ...importsRemaining,\n      }\n    }\n\n    scopesWrapped[scopeKeyWrapped] = scopeValueWrapped\n    if (scopeKeyWrapped !== scopeKey) {\n      scopesWrapped[scopeKey] = { ...scopeValueWrapped }\n    }\n  })\n\n  return scopesWrapped\n}\n\nconst scopeHasLeadingSlashScopedRemapping = (scopeImports, scopeKey) => {\n  return (\n    scopeKey in scopeImports &&\n    scopeImports[scopeKey] === scopeKey &&\n    \"/\" in scopeImports &&\n    scopeImports[\"/\"] === scopeKey\n  )\n}\n\nconst wrapImports = (imports, into) => {\n  const importsWrapped = {}\n  const importsRemaining = {}\n\n  Object.keys(imports).forEach((importKey) => {\n    const importValue = imports[importKey]\n    const importKeyWrapped = wrapSpecifier(importKey, into)\n    const importValueWrapped = wrapAddress(importValue, into)\n\n    const keyChanged = importKeyWrapped !== importKey\n    const valueChanged = importValueWrapped !== importValue\n    if (keyChanged || valueChanged) {\n      importsWrapped[importKeyWrapped] = importValueWrapped\n    } else {\n      importsRemaining[importKey] = importValue\n    }\n  })\n\n  return {\n    importsWrapped,\n    importsRemaining,\n  }\n}\n\nconst wrapTopLevelImports = (imports, into) => {\n  const { importsWrapped, importsRemaining } = wrapImports(imports, into)\n  return {\n    ...importsWrapped,\n    ...importsRemaining,\n  }\n}\n\nconst wrapSpecifier = (specifier, into) => {\n  if (specifier.startsWith(\"//\")) {\n    return specifier\n  }\n\n  if (specifier[0] === \"/\") {\n    return `${into}${specifier.slice(1)}`\n  }\n\n  if (specifier.startsWith(\"./\")) {\n    return `./${into}${specifier.slice(2)}`\n  }\n\n  return specifier\n}\n\nconst wrapAddress = (string, into) => {\n  if (string.startsWith(\"//\")) {\n    return string\n  }\n\n  if (string[0] === \"/\") {\n    return `${into}${string.slice(1)}`\n  }\n\n  if (string.startsWith(\"./\")) {\n    return `./${into}${string.slice(2)}`\n  }\n\n  if (string.startsWith(\"../\")) {\n    return string\n  }\n\n  if (hasScheme(string)) {\n    return string\n  }\n\n  // bare\n  return `${into}${string}`\n}\n\nconst formulateFolderRelativeNameMustBeAString = ({\n  folderRelativeName,\n}) => `folderRelativeName must be a string.\n--- folder relative name ---\n${folderRelativeName}`\n"],"names":["assertImportMap","value","TypeError","type","Array","isArray","hasScheme","string","test","hrefToScheme","href","colonIndex","indexOf","slice","hrefToPathname","ressourceToPathname","hrefToRessource","scheme","length","afterProtocol","pathnameSlashIndex","ressource","searchSeparatorIndex","hrefToOrigin","secondProtocolSlashIndex","pathnameToDirname","pathname","slashLastIndex","lastIndexOf","resolveUrl","specifier","baseUrl","writeBaseUrlMustBeAString","Error","writeBaseUrlMustBeAbsolute","writeBaseUrlRequired","baseOrigin","basePathname","baseDirname","unresolvedPathname","importerFolders","split","pop","resolvedPathname","join","tryUrlResolution","url","result","resolveSpecifier","importer","startsWith","applyImportMap","importMap","writeSpecifierMustBeAString","writeImporterMustBeAString","writeImporterMustBeAbsolute","specifierUrl","specifierNormalized","scopes","scopeKeyMatching","Object","keys","find","scopeKey","specifierIsPrefixOf","scopeValue","remappingFromScopeImports","applyImports","imports","remappingFromImports","writeBareSpecifierMustBeRemapped","importKeyArray","i","importKey","importValue","afterImportKey","specifierHref","composeTwoImportMaps","leftImportMap","rightImportMap","composeTwoImports","composeTwoScopes","leftImports","rightImports","leftScopes","rightScopes","forEach","hasOwnProperty","sortImportMap","sortImports","undefined","sortScopes","importsSorted","sort","compareLengthOrLocaleCompare","name","scopesSorted","scopeName","a","b","localeCompare","normalizeImportMap","formulateBaseUrlMustBeAString","normalizeImports","normalizeScopes","importsNormalized","address","console","warn","formulateAddressMustBeAString","specifierResolved","addressUrl","formulateAdressResolutionFailed","endsWith","formulateAddressUrlRequiresTrailingSlash","scopesNormalized","scope","scopeUrl","formulateScopeResolutionFailed","scopeValueNormalized","addressURL","normalizeImportMapForProject","httpResolutionOrigin","pathnameToExtension","dotLastIndex","resolveImport","defaultExtension","applyDefaultExtension","extension","importerPathname","importerExtension","startsWithWindowsDriveLetter","firstChar","secondChar","isWindowsPath","path","replaceBackSlashesWithSlashes","replace","operatingSystemPathToPathname","operatingSystemPath","pathnameToRelativePath","otherPathname","escapeRegexpSpecialCharacters","String","escapedString","char","isRegExpSpecialChar","regexpSpecialChars","resolveImportForProject","projectPath","projectPathname","importDefaultExtension","httpResolutionForcing","insideProjectForcing","projectHref","importerHref","hrefUseFileProtocol","formulateImporterMustBeInsideProject","importerForProject","importerRelativePath","isOriginRelativeSpecifier","isOutsideProject","formulateImportMustBeInsideProject","importUrl","e","httpResolutionOriginRegExp","RegExp","projectOrigin","stack","message","importRelativePath","resolveSpecifierForProject","specifierHttpResolved","specifierRelativePath","wrapImportMap","folderRelativeName","ensureInto","formulateFolderRelativeNameMustBeAString","into","importsForWrapping","wrapTopLevelImports","scopesForWrapping","wrapScopes","scopesWrapped","scopeKeyWrapped","wrapAddress","importsWrapped","importsRemaining","wrapImports","scopeValueWrapped","scopeHasLeadingSlashScopedRemapping","leadingSlashSpecifier","importKeyWrapped","scopeImports","wrapSpecifier","importValueWrapped","keyChanged","valueChanged"],"mappings":"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"}